openapi: 3.0.3
info:
  title: MediaLake API
  version: 1.0.0
  description: |
    # MediaLake API

    The MediaLake API provides programmatic access to MediaLake's media asset management system.
    This API allows developers to integrate MediaLake's powerful media processing, storage, and
    management capabilities into their applications.

    ## Features

    - **Asset Management**: Upload, download, search, and manage media assets
    - **Processing Pipelines**: Create and manage media processing workflows
    - **Storage Connectors**: Connect to various storage providers
    - **User Management**: Manage users, roles, and permissions
    - **Review Workflows**: Create and manage content review processes

    ## Authentication

    The API uses two authentication mechanisms:

    1. **Cognito User Pools**: For user authentication using JWT tokens
    2. **X-Origin-Verify**: For origin verification to prevent CSRF attacks

    ## Rate Limiting

    API requests are rate-limited to ensure fair usage and system stability. The current limits are:

    - 100 requests per minute for standard operations
    - 10 requests per minute for resource-intensive operations

    ## Pagination

    List endpoints support pagination using the `page` and `limit` query parameters.

    ## Versioning

    The API uses semantic versioning. The current version is 1.0.0.

    ## Support

    For API support, please contact the MediaLake support team.

    ## Known Issues

    This is the first version of api documentation that simplifies information sharing. Some api response object names documented here may not match the actual response of the API's. To meet the open api spec some of the api response and request attributes have the resource name appended in the documentation. For example AssetDigitalSource instead of DigitalSource. There are also known observed overlap of attribute names in different API's which needs to be fixed in the future version of the code. The API schemes have solved this in the documenting by prefixing the resource name. For example SettingsUser object under Settings resource vs User object in User resource.

  termsOfService: https://www.medialake.example.com/terms
  contact:
    name: MediaLake API Support
    url: https://www.medialake.example.com/support
    email: api-support@medialake.example.com
  license:
    name: Proprietary
    url: https://www.medialake.example.com/license

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    description: MediaLake API endpoint
    variables:
      apiId:
        default: 1rd7f2p6u5
        description: API Gateway ID
      region:
        default: us-west-2
        description: AWS Region
      stage:
        default: v1
        description: API Stage

security:
  - CognitoAuth: []
  - XOriginVerify: []

components:
  schemas:
    # Authorization Schemas
    Asset:
      type: object
      properties:
        InventoryID:
          type: string
          description: Inventory ID of the asset
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        AssetDigitalSource:
          $ref: "#/components/schemas/AssetDigitalSource"
        AssetDerivedRepresentations:
          type: array
          description: Derived representations of the asset
          items:
            $ref: "#/components/schemas/AssetDerivedRepresentation"
        FileHash:
          type: string
          description: Hash of the asset file
          example: "5eb63bbbe01eeed093cb22bb8f5acdc3" # pragma: allowlist secret
        Metadata:
          $ref: "#/components/schemas/AssetMetadata"

    AssetDigitalSource:
      type: object
      properties:
        ID:
          type: string
          description: Asset ID
          example: "asset:img:a1b2c3d4"
        Type:
          type: string
          description: Asset type
          example: "image"
        Name:
          type: string
          description: Asset name
          example: "Sample Image"
        CreateDate:
          type: string
          format: date-time
          description: Creation date
          example: "2023-01-01T12:00:00Z"
        UpdateDate:
          type: string
          format: date-time
          description: Update date
          example: "2023-01-02T12:00:00Z"
        AssetMainRepresentation:
          $ref: "#/components/schemas/AssetMainRepresentation"
        ComputedFields:
          type: object
          description: Computed fields
          properties:
            TotalSize:
              type: integer
              description: Total size of all representations in bytes
              example: 1536000
            LastModified:
              type: string
              format: date-time
              description: Last modified date
              example: "2023-01-02T12:00:00Z"
      required:
        - ID
        - Type
        - AssetMainRepresentation

    AssetMainRepresentation:
      type: object
      description: Main representation of the asset
      properties:
        AssetStorageInfo:
          $ref: "#/components/schemas/AssetStorageInfo"
        Format:
          type: string
          description: Format of the asset
          example: "jpg"
      required:
        - AssetStorageInfo

    AssetStorageInfo:
      type: object
      description: Storage information
      properties:
        PrimaryLocation:
          type: object
          description: Primary storage location
          properties:
            StorageType:
              type: string
              description: Storage type
              example: "s3"
            Bucket:
              type: string
              description: S3 bucket name
              example: "medialake-assets"
            ObjectKey:
              type: object
              description: Object key information
              properties:
                FullPath:
                  type: string
                  description: Full path to the object
                  example: "assets/sample-image.jpg"
                Name:
                  type: string
                  description: Name of the file
                  example: "sample-image.jpg"
            FileInfo:
              type: object
              description: File information
              properties:
                Size:
                  type: integer
                  description: File size in bytes
                  example: 1024000
                ContentType:
                  type: string
                  description: Content type
                  example: "image/jpeg"
                CreateDate:
                  type: string
                  format: date-time
                  description: Creation date
                  example: "2023-01-01T12:00:00Z"
          required:
            - StorageType
            - Bucket
            - ObjectKey
      required:
        - PrimaryLocation

    AssetDerivedRepresentation:
      type: object
      description: Derived representation of the asset
      properties:
        Purpose:
          type: string
          description: Purpose of the representation
          example: "thumbnail"
        AssetStorageInfo:
          $ref: "#/components/schemas/AssetStorageInfo"
        URL:
          type: string
          format: uri
          description: Presigned URL to access the representation
          example: "https://example.com/assets/thumbnail.jpg"
      required:
        - Purpose
        - AssetStorageInfo

    AssetMetadata:
      type: object
      description: Asset metadata
      properties:
        Embedded:
          type: object
          description: Embedded metadata
          additionalProperties: true
        Generated:
          type: object
          description: Generated metadata
          additionalProperties: true
        Consolidated:
          type: object
          description: Consolidated metadata
          additionalProperties: true

    AssetClip:
      type: object
      description: Clip information for video or audio assets
      properties:
        score:
          type: number
          description: Relevance score
          example: 0.95
        start_timecode:
          type: string
          description: Start timecode
          example: "00:01:23.456"
        end_timecode:
          type: string
          description: End timecode
          example: "00:01:45.789"
        timestamp:
          type: string
          format: date-time
          description: Timestamp
          example: "2023-01-01T12:00:00Z"
        type:
          type: string
          description: Clip type
          example: "scene"
      required:
        - start_timecode
        - end_timecode

    AssetPagination:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items in the current page
          example: 20
        has_more:
          type: boolean
          description: Whether there are more pages available
          example: true
        next_token:
          type: string
          description: Token for retrieving the next page
          example: "eyJJRCI6eyJTIjoiYXNzZXQ6aW1nOmFiY2RlZiJ9fQ==" # pragma: allowlist secret
      required:
        - total
        - has_more

    AssetsListResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Assets retrieved successfully"
        data:
          type: object
          properties:
            assets:
              type: array
              description: List of assets
              items:
                $ref: "#/components/schemas/Asset"
            pagination:
              $ref: "#/components/schemas/AssetPagination"
          required:
            - assets
            - pagination
      required:
        - status
        - message
        - data

    AssetDetailResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Asset details retrieved successfully"
        data:
          type: object
          properties:
            asset:
              $ref: "#/components/schemas/Asset"
            clips:
              type: array
              description: Clips for video or audio assets
              items:
                $ref: "#/components/schemas/AssetClip"
          required:
            - asset
      required:
        - status
        - message
        - data

    AssetSuccessResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Operation completed successfully"
      required:
        - status
        - message

    AssetRenameRequest:
      type: object
      properties:
        name:
          type: string
          description: New name for the asset
          example: "New Asset Name"
      required:
        - name

    AssetRelatedVersionsResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Related versions retrieved successfully"
        data:
          type: object
          properties:
            relatedVersions:
              type: array
              description: List of related asset versions
              items:
                $ref: "#/components/schemas/Asset"
          required:
            - relatedVersions
      required:
        - status
        - message
        - data

    AssetTranscriptResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Transcript retrieved successfully"
        data:
          type: object
          properties:
            transcript:
              type: object
              description: Transcript data
              properties:
                segments:
                  type: array
                  description: Transcript segments
                  items:
                    type: object
                    properties:
                      start_time:
                        type: number
                        description: Start time in seconds
                        example: 0.0
                      end_time:
                        type: number
                        description: End time in seconds
                        example: 5.2
                      text:
                        type: string
                        description: Transcript text
                        example: "Hello, welcome to this video."
                      confidence:
                        type: number
                        description: Confidence score
                        example: 0.95
                    required:
                      - start_time
                      - end_time
                      - text
                full_text:
                  type: string
                  description: Full transcript text
                  example: "Hello, welcome to this video. Today we will discuss..."
              required:
                - segments
                - full_text
          required:
            - transcript
      required:
        - status
        - message
        - data

    AssetPresignedUrlRequest:
      type: object
      properties:
        inventory_id:
          type: string
          description: Inventory ID of the asset
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        expiration_time:
          type: integer
          description: Expiration time in seconds (60-604800)
          minimum: 60
          maximum: 604800
          default: 3600
          example: 3600
        purpose:
          type: string
          description: Purpose of the representation to download
          example: "thumbnail"
      required:
        - inventory_id

    AssetPresignedUrlResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Presigned URL generated successfully"
        data:
          type: object
          properties:
            presigned_url:
              type: string
              format: uri
              description: Presigned URL for downloading the asset
              example: "https://medialake-assets.s3.amazonaws.com/assets/sample-image.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20230101%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230101T120000Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=71a76dc1d7fb10c5..." # pragma: allowlist secret
            expires_in:
              type: integer
              description: Expiration time in seconds
              example: 3600
            asset_id:
              type: string
              description: Asset ID
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          required:
            - presigned_url
            - expires_in
            - asset_id
      required:
        - status
        - message
        - data

    AssetUploadRequest:
      type: object
      properties:
        filename:
          type: string
          description: Name of the file to upload
          example: "sample-image.jpg"
        content_type:
          type: string
          description: Content type of the file
          example: "image/jpeg"
        size:
          type: integer
          description: Size of the file in bytes
          example: 1024000
        metadata:
          type: object
          description: Additional metadata for the asset
          additionalProperties: true
      required:
        - filename
        - content_type
        - size

    AssetUploadResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Upload URL generated successfully"
        data:
          type: object
          properties:
            upload_url:
              type: string
              format: uri
              description: Presigned URL for uploading the asset
              example: "https://medialake-assets.s3.amazonaws.com/uploads/sample-image.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20230101%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230101T120000Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=71a76dc1d7fb10c5..." # pragma: allowlist secret
            expires_in:
              type: integer
              description: Expiration time in seconds
              example: 3600
            asset_id:
              type: string
              description: Asset ID
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            fields:
              type: object
              description: Additional fields to include in the upload form
              additionalProperties: true
          required:
            - upload_url
            - expires_in
            - asset_id
      required:
        - status
        - message
        - data

    AssetBulkDownloadRequest:
      type: object
      properties:
        asset_ids:
          type: array
          description: IDs of assets to download
          items:
            type: string
          example:
            [
              "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
              "b2c3d4e5-f6g7-8901-abcd-ef2345678901",
            ]
        representation:
          type: string
          description: Representation to download (original, proxy, etc.)
          default: "original"
          example: "original"
      required:
        - asset_ids

    AssetBulkDownloadJobResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Bulk download job initiated successfully"
        data:
          type: object
          properties:
            job_id:
              type: string
              description: Bulk download job ID
              example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
            status:
              type: string
              description: Status of the job
              enum: ["pending", "processing", "completed", "failed"]
              example: "pending"
            asset_count:
              type: integer
              description: Number of assets in the job
              example: 2
          required:
            - job_id
            - status
            - asset_count
      required:
        - status
        - message
        - data

    AssetBulkDownloadStatusResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "Bulk download status retrieved successfully"
        data:
          type: object
          properties:
            job_id:
              type: string
              description: Bulk download job ID
              example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
            status:
              type: string
              description: Status of the job
              enum: ["pending", "processing", "completed", "failed"]
              example: "completed"
            asset_count:
              type: integer
              description: Number of assets in the job
              example: 2
            created_at:
              type: string
              format: date-time
              description: Creation timestamp
              example: "2023-01-01T12:00:00Z"
            completed_at:
              type: string
              format: date-time
              description: Completion timestamp
              example: "2023-01-01T12:05:30Z"
            download_url:
              type: string
              format: uri
              description: Presigned URL for downloading the ZIP file
              example: "https://medialake-assets.s3.amazonaws.com/bulk-downloads/b2c3d4e5-f6g7-8901-abcd-ef2345678901.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20230101%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230101T120000Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=71a76dc1d7fb10c5..." # pragma: allowlist secret
            expires_at:
              type: string
              format: date-time
              description: Expiration timestamp for the download URL
              example: "2023-01-01T13:05:30Z"
          required:
            - job_id
            - status
            - asset_count
            - created_at
      required:
        - status
        - message
        - data

    AssetUserBulkDownloadsResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
          example: "success"
        message:
          type: string
          description: Status message
          example: "User bulk downloads retrieved successfully"
        data:
          type: object
          properties:
            jobs:
              type: array
              description: List of bulk download jobs
              items:
                type: object
                properties:
                  job_id:
                    type: string
                    description: Bulk download job ID
                    example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
                  status:
                    type: string
                    description: Status of the job
                    enum: ["pending", "processing", "completed", "failed"]
                    example: "completed"
                  asset_count:
                    type: integer
                    description: Number of assets in the job
                    example: 2
                  created_at:
                    type: string
                    format: date-time
                    description: Creation timestamp
                    example: "2023-01-01T12:00:00Z"
                  completed_at:
                    type: string
                    format: date-time
                    description: Completion timestamp
                    example: "2023-01-01T12:05:30Z"
                required:
                  - job_id
                  - status
                  - asset_count
                  - created_at
          required:
            - jobs
      required:
        - status
        - message
        - data
    # Authorization Schemas
    AuthorizationPermission:
      type: object
      properties:
        action:
          type: string
          description: The action to be performed
          example: "create"
        resource:
          type: string
          description: The resource type the action applies to
          example: "assets"
        effect:
          type: string
          description: Whether to allow or deny the permission
          enum: ["Allow", "Deny"]
          example: "Allow"
        conditions:
          type: object
          description: Optional conditions for the permission
          additionalProperties: true
          example:
            ownerOnly: true
      required:
        - action
        - resource
        - effect

    AuthorizationPermissionSet:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the permission set
          example: "admin"
        name:
          type: string
          description: Display name of the permission set
          example: "Administrator"
        description:
          type: string
          description: Description of the permission set
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permissions in the permission set
          items:
            $ref: "#/components/schemas/AuthorizationPermission"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        createdBy:
          type: string
          description: ID of the user who created the permission set
          example: "12345678-1234-1234-1234-123456789012"
        isBuiltIn:
          type: boolean
          description: Whether this is a built-in permission set
          example: false
      required:
        - id
        - name
        - permissions

    AuthorizationPermissionSetCreate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the permission set
          example: "admin"
        name:
          type: string
          description: Display name of the permission set
          example: "Administrator"
        description:
          type: string
          description: Description of the permission set
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permissions in the permission set
          items:
            $ref: "#/components/schemas/AuthorizationPermission"
      required:
        - id
        - name
        - permissions

    AuthorizationPermissionSetUpdate:
      type: object
      properties:
        name:
          type: string
          description: Display name of the permission set
          example: "Administrator"
        description:
          type: string
          description: Description of the permission set
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permissions in the permission set
          items:
            $ref: "#/components/schemas/AuthorizationPermission"
      required:
        - permissions
    # Connector Schemas
    Connector:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the connector
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the connector
          example: "Production Assets"
        description:
          type: string
          description: Description of the connector
          example: "S3 bucket for production media assets"
        type:
          type: string
          description: Type of connector
          enum: ["s3"]
          example: "s3"
        status:
          type: string
          description: Status of the connector
          enum: ["active", "inactive", "error"]
          example: "active"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        storageIdentifier:
          type: string
          description: Storage identifier (e.g., S3 bucket name)
          example: "my-production-assets"
        region:
          type: string
          description: AWS region
          example: "us-east-1"
        objectPrefix:
          type: string
          description: Object prefix in the storage
          example: "media/"
        integrationMethod:
          type: string
          description: Integration method
          enum: ["s3Notifications", "eventbridge"]
          example: "eventbridge"
        iamRoleArn:
          type: string
          description: IAM role ARN
          example: "arn:aws:iam::123456789012:role/medialake-connector-role"
        lambdaArn:
          type: string
          description: Lambda function ARN
          example: "arn:aws:lambda:us-east-1:123456789012:function:medialake-connector-function"
        queueUrl:
          type: string
          description: SQS queue URL
          example: "https://sqs.us-east-1.amazonaws.com/123456789012/medialake-connector-queue"
        sqsArn:
          type: string
          description: SQS queue ARN
          example: "arn:aws:sqs:us-east-1:123456789012:medialake-connector-queue"
        usage:
          type: object
          properties:
            total:
              type: integer
              description: Total usage
              example: 1024000
        configuration:
          type: object
          properties:
            queueUrl:
              type: string
              description: SQS queue URL
              example: "https://sqs.us-east-1.amazonaws.com/123456789012/medialake-connector-queue"
            lambdaArn:
              type: string
              description: Lambda function ARN
              example: "arn:aws:lambda:us-east-1:123456789012:function:medialake-connector-function"
            iamRoleArn:
              type: string
              description: IAM role ARN
              example: "arn:aws:iam::123456789012:role/medialake-connector-role"
        settings:
          type: object
          properties:
            bucket:
              type: string
              description: S3 bucket name
              example: "my-production-assets"
            region:
              type: string
              description: AWS region
              example: "us-east-1"
            path:
              type: string
              description: Path in the bucket
              example: "media/"
      required:
        - id
        - name
        - type
        - status
        - createdAt
        - updatedAt
        - storageIdentifier
        - region

    ConnectorCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the connector
          example: "Production Assets"
        description:
          type: string
          description: Description of the connector
          example: "S3 bucket for production media assets"
        type:
          type: string
          description: Type of connector
          enum: ["s3"]
          example: "s3"
        configuration:
          type: object
          description: Connector configuration
          properties:
            bucket:
              type: string
              description: S3 bucket name
              example: "my-production-assets"
            region:
              type: string
              description: AWS region
              example: "us-east-1"
            prefix:
              type: string
              description: Prefix path in the bucket
              example: "media/"
            roleArn:
              type: string
              description: IAM role ARN for cross-account access
              example: "arn:aws:iam::123456789012:role/MediaLakeConnectorRole"
          required:
            - bucket
            - region
      required:
        - name
        - type
        - configuration

    S3ConnectorCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the connector
          example: "Production Assets"
        description:
          type: string
          description: Description of the connector
          example: "S3 bucket for production media assets"
        type:
          type: string
          description: Type of connector
          enum: ["s3"]
          example: "s3"
        configuration:
          type: object
          properties:
            bucket:
              type: string
              description: S3 bucket name
              example: "my-production-assets"
            s3IntegrationMethod:
              type: string
              description: S3 integration method
              enum: ["s3Notifications", "eventbridge"]
              example: "eventbridge"
            objectPrefix:
              type: array
              description: Object prefixes in the bucket
              items:
                type: string
                example: "media/"
            bucketType:
              type: string
              description: Bucket type
              enum: ["new", "existing"]
              example: "existing"
            region:
              type: string
              description: AWS region
              example: "us-east-1"
          required:
            - bucket
            - s3IntegrationMethod
      required:
        - name
        - type
        - configuration
    # Environment Schemas
    Environment:
      type: object
      properties:
        environment_id:
          type: string
          format: uuid
          description: Unique identifier for the environment
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the environment
          minLength: 1
          maxLength: 100
          example: "Production"
        status:
          type: string
          description: Status of the environment
          enum: ["active", "disabled"]
          example: "active"
        region:
          type: string
          description: AWS region for the environment
          minLength: 1
          maxLength: 50
          example: "us-east-1"
        tags:
          type: object
          description: Tags associated with the environment
          additionalProperties:
            type: string
          example:
            cost-center: "dept-123"
            team: "platform"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
      required:
        - environment_id
        - name
        - status
        - region
        - created_at
        - updated_at

    EnvironmentCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the environment
          minLength: 1
          maxLength: 100
          example: "Production"
        region:
          type: string
          description: AWS region for the environment
          minLength: 1
          maxLength: 50
          example: "us-east-1"
        tags:
          type: object
          description: Tags associated with the environment
          additionalProperties:
            type: string
          example:
            cost-center: "dept-123"
            team: "platform"
      required:
        - name
        - region

    EnvironmentUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the environment
          minLength: 1
          maxLength: 100
          example: "Production"
        status:
          type: string
          description: Status of the environment
          enum: ["active", "disabled"]
          example: "active"
        region:
          type: string
          description: AWS region for the environment
          minLength: 1
          maxLength: 50
          example: "us-east-1"
        tags:
          type: object
          description: Tags associated with the environment
          additionalProperties:
            type: string
          example:
            cost-center: "dept-123"
            team: "platform"
    # Groups Schemas
    GroupSummary:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the group
          example: "admin"
        name:
          type: string
          description: Display name of the group
          example: "Administrators"
        description:
          type: string
          description: Description of the group
          example: "System administrators with full access"
        department:
          type: string
          description: Department associated with the group
          example: "IT"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt

    Group:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the group
          example: "admin"
        name:
          type: string
          description: Display name of the group
          example: "Administrators"
        description:
          type: string
          description: Description of the group
          example: "System administrators with full access"
        department:
          type: string
          description: Department associated with the group
          example: "IT"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        members:
          type: array
          description: List of group members
          items:
            $ref: "#/components/schemas/GroupMember"
        assignedPermissionSets:
          type: array
          description: List of permission sets assigned to the group
          items:
            type: string
          example: ["admin", "editor"]
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
        - members
        - assignedPermissionSets

    GroupCreate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the group (used for Cognito group name)
          example: "admin"
          pattern: "^[a-zA-Z0-9_]+$"
        name:
          type: string
          description: Display name of the group
          example: "Administrators"
        description:
          type: string
          description: Description of the group
          example: "System administrators with full access"
        department:
          type: string
          description: Department associated with the group
          example: "IT"
        assignedPermissionSets:
          type: array
          description: List of permission sets assigned to the group
          items:
            type: string
          example: ["admin", "editor"]
      required:
        - id
        - name
        - description

    GroupUpdate:
      type: object
      properties:
        name:
          type: string
          description: Display name of the group
          example: "Administrators"
        description:
          type: string
          description: Description of the group
          example: "System administrators with full access"
        department:
          type: string
          description: Department associated with the group
          example: "IT"
        assignedPermissionSets:
          type: array
          description: List of permission sets assigned to the group
          items:
            type: string
          example: ["admin", "editor"]

    GroupMember:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user
          example: "12345678-1234-1234-1234-123456789012"
        addedAt:
          type: string
          format: date-time
          description: Timestamp when the user was added to the group
          example: "2023-01-01T12:00:00Z"
      required:
        - userId
        - addedAt
    # Integration Schemas
    Integration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the integration
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the integration
          example: "Twelve Labs"
        nodeId:
          type: string
          description: ID of the node associated with the integration
          example: "twelve_labs"
        type:
          type: string
          description: Type of integration
          example: "ai"
        status:
          type: string
          description: Status of the integration
          enum: ["active", "inactive", "error"]
          example: "active"
        description:
          type: string
          description: Description of the integration
          example: "Twelve Labs AI video analysis integration"
        configuration:
          type: object
          description: Configuration details for the integration
          additionalProperties: true
          example:
            auth:
              type: "apiKey"
              credentials:
                apiKeySecretArn: "arn:aws:secretsmanager:us-east-1:123456789012:secret:integration/a1b2c3d4-e5f6-7890-abcd-ef1234567890/api-key"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
      required:
        - id
        - name
        - nodeId
        - type
        - status
        - createdAt
        - updatedAt

    IntegrationCreate:
      type: object
      properties:
        nodeId:
          type: string
          description: ID of the node to integrate with
          example: "twelve_labs"
        description:
          type: string
          description: Description of the integration
          example: "Twelve Labs AI video analysis integration"
        auth:
          type: object
          description: Authentication details for the integration
          properties:
            type:
              type: string
              description: Type of authentication
              enum: ["apiKey"]
              example: "apiKey"
            credentials:
              type: object
              description: Authentication credentials
              properties:
                apiKey:
                  type: string
                  description: API key for authentication
                  example: "sk_12345678901234567890"
              required:
                - apiKey
          required:
            - type
            - credentials
      required:
        - nodeId
        - auth

    IntegrationUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the integration
          example: "Twelve Labs"
        description:
          type: string
          description: Description of the integration
          example: "Twelve Labs AI video analysis integration"
        status:
          type: string
          description: Status of the integration
          enum: ["active", "inactive"]
          example: "active"
        auth:
          type: object
          description: Authentication details for the integration
          properties:
            type:
              type: string
              description: Type of authentication
              enum: ["apiKey"]
              example: "apiKey"
            credentials:
              type: object
              description: Authentication credentials
              properties:
                apiKey:
                  type: string
                  description: API key for authentication
                  example: "sk_12345678901234567890"
              required:
                - apiKey
          required:
            - type
            - credentials
    # Nodes Schemas
    NodeSummary:
      type: object
      properties:
        nodeId:
          type: string
          description: Unique identifier for the node
          example: "twelve_labs"
        info:
          type: object
          description: Basic information about the node
          properties:
            title:
              type: string
              description: Display name of the node
              example: "Twelve Labs"
            description:
              type: string
              description: Description of the node
              example: "Twelve Labs AI video analysis"
            nodeType:
              type: string
              description: Type of node
              example: "API"
            categories:
              type: array
              description: Categories the node belongs to
              items:
                type: string
              example: ["AI", "Video Analysis"]
            tags:
              type: array
              description: Tags associated with the node
              items:
                type: string
              example: ["video", "ai", "analysis"]
            enabled:
              type: boolean
              description: Whether the node is enabled
              example: true
          required:
            - title
            - nodeType
        auth:
          type: object
          description: Authentication configuration for the node
          properties:
            authMethod:
              type: string
              description: Authentication method
              example: "apiKey"
          additionalProperties: true
      required:
        - nodeId
        - info

    Node:
      type: object
      properties:
        nodeId:
          type: string
          description: Unique identifier for the node
          example: "twelve_labs"
        info:
          type: object
          description: Detailed information about the node
          properties:
            title:
              type: string
              description: Display name of the node
              example: "Twelve Labs"
            description:
              type: string
              description: Description of the node
              example: "Twelve Labs AI video analysis"
            nodeType:
              type: string
              description: Type of node
              example: "API"
            iconUrl:
              type: string
              description: URL to the node's icon
              example: "https://example.com/icons/twelve_labs.png"
            categories:
              type: array
              description: Categories the node belongs to
              items:
                type: string
              example: ["AI", "Video Analysis"]
            tags:
              type: array
              description: Tags associated with the node
              items:
                type: string
              example: ["video", "ai", "analysis"]
            enabled:
              type: boolean
              description: Whether the node is enabled
              example: true
            createdAt:
              type: string
              format: date-time
              description: Creation timestamp
              example: "2023-01-01T12:00:00Z"
            updatedAt:
              type: string
              format: date-time
              description: Last update timestamp
              example: "2023-01-02T14:30:00Z"
            inputTypes:
              type: array
              description: Types of input the node accepts
              items:
                type: string
              example: ["video/mp4", "video/quicktime"]
            outputTypes:
              type: array
              description: Types of output the node produces
              items:
                type: string
              example: ["application/json"]
          required:
            - title
            - nodeType
        auth:
          type: object
          description: Authentication configuration for the node
          properties:
            authMethod:
              type: string
              description: Authentication method
              example: "apiKey"
            authConfig:
              type: object
              description: Authentication configuration details
              additionalProperties: true
          required:
            - authMethod
        methods:
          type: array
          description: Methods available for the node
          items:
            $ref: "#/components/schemas/NodeMethod"
        connections:
          type: object
          description: Connection information for the node
          properties:
            incoming:
              type: object
              description: Incoming connections
              additionalProperties: true
            outgoing:
              type: object
              description: Outgoing connections
              additionalProperties: true
          required:
            - incoming
            - outgoing
      required:
        - nodeId
        - info
        - methods
        - connections

    NodeWithMethods:
      type: object
      properties:
        nodeId:
          type: string
          description: Unique identifier for the node
          example: "twelve_labs"
        info:
          type: object
          description: Information about the node
          properties:
            title:
              type: string
              description: Display name of the node
              example: "Twelve Labs"
            description:
              type: string
              description: Description of the node
              example: "Twelve Labs AI video analysis"
            nodeType:
              type: string
              description: Type of node
              example: "API"
            categories:
              type: array
              description: Categories the node belongs to
              items:
                type: string
              example: ["AI", "Video Analysis"]
            tags:
              type: array
              description: Tags associated with the node
              items:
                type: string
              example: ["video", "ai", "analysis"]
            enabled:
              type: boolean
              description: Whether the node is enabled
              example: true
            createdAt:
              type: string
              format: date-time
              description: Creation timestamp
              example: "2023-01-01T12:00:00Z"
            updatedAt:
              type: string
              format: date-time
              description: Last update timestamp
              example: "2023-01-02T14:30:00Z"
          required:
            - title
            - nodeType
        methods:
          type: array
          description: Methods available for the node
          items:
            $ref: "#/components/schemas/NodeMethod"
        connections:
          type: object
          description: Connection information for the node
          properties:
            incoming:
              type: object
              description: Incoming connections
              additionalProperties: true
            outgoing:
              type: object
              description: Outgoing connections
              additionalProperties: true
          required:
            - incoming
            - outgoing
      required:
        - nodeId
        - info
        - methods
        - connections

    NodeMethod:
      type: object
      properties:
        name:
          type: string
          description: Name of the method
          example: "analyzeVideo"
        description:
          type: string
          description: Description of the method
          example: "Analyzes video content using AI"
        requestMapping:
          type: object
          description: Request mapping configuration
          additionalProperties: true
        responseMapping:
          type: object
          description: Response mapping configuration
          additionalProperties: true
        parameters:
          type: array
          description: Parameters for the method
          items:
            type: object
            properties:
              name:
                type: string
                description: Parameter name
                example: "apiKey"
              type:
                type: string
                description: Parameter type
                example: "string"
              required:
                type: boolean
                description: Whether the parameter is required
                example: true
              description:
                type: string
                description: Parameter description
                example: "API key for authentication"
            required:
              - name
              - type
      required:
        - name
    # Permissions Schemas
    Permission:
      type: object
      properties:
        action:
          type: string
          description: The action to be performed
          example: "create"
        resource:
          type: string
          description: The resource type the action applies to
          example: "assets"
        effect:
          type: string
          description: Whether to allow or deny the permission
          enum: ["Allow", "Deny"]
          example: "Allow"
        conditions:
          type: object
          description: Optional conditions for the permission
          additionalProperties: true
          example:
            ownerOnly: true
      required:
        - action
        - resource
        - effect

    PermissionSet:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the permission set
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the permission set
          example: "Content Editor"
        description:
          type: string
          description: Description of the permission set
          example: "Permissions for content editors"
        permissions:
          type: array
          description: List of permissions in this set
          items:
            $ref: "#/components/schemas/Permission"
        isSystem:
          type: boolean
          description: Whether this is a system-defined permission set
          example: false
        effectiveRole:
          type: string
          description: Effective role for this permission set
          example: "editor"
        createdBy:
          type: string
          description: ID of the user who created the permission set
          example: "12345678-1234-1234-1234-123456789012"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
      required:
        - id
        - name
        - description
        - permissions
        - isSystem
        - createdAt
        - updatedAt

    PermissionSetCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the permission set
          example: "Content Editor"
        description:
          type: string
          description: Description of the permission set
          example: "Permissions for content editors"
        permissions:
          type: array
          description: List of permissions in this set
          items:
            $ref: "#/components/schemas/Permission"
      required:
        - name
        - description
        - permissions

    PermissionSetUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the permission set
          example: "Content Editor"
        description:
          type: string
          description: Description of the permission set
          example: "Permissions for content editors"
        permissions:
          type: array
          description: List of permissions in this set
          items:
            $ref: "#/components/schemas/Permission"
      required:
        - name
        - description
        - permissions
    # Pipeline Schemas
    Pipeline:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the pipeline
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the pipeline
          example: "Video Analysis Pipeline"
        description:
          type: string
          description: Description of the pipeline
          example: "Analyzes video content using AI services"
        status:
          type: string
          description: Status of the pipeline
          enum: ["active", "inactive", "error"]
          example: "active"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        createdBy:
          type: string
          description: ID of the user who created the pipeline
          example: "12345678-1234-1234-1234-123456789012"
        version:
          type: integer
          description: Version number of the pipeline
          example: 1
        type:
          type: string
          description: Type of pipeline
          example: "Event Triggered"
        configuration:
          type: object
          description: Pipeline configuration
          properties:
            nodes:
              type: array
              description: List of nodes in the pipeline
              items:
                $ref: "#/components/schemas/PipelineNode"
            edges:
              type: array
              description: List of connections between nodes
              items:
                $ref: "#/components/schemas/PipelineEdge"
            settings:
              type: object
              description: Pipeline settings
              properties:
                autoStart:
                  type: boolean
                  description: Whether the pipeline should start automatically
                  example: true
                retryAttempts:
                  type: integer
                  description: Number of retry attempts
                  example: 3
                timeout:
                  type: integer
                  description: Timeout in seconds
                  example: 300
              required:
                - autoStart
                - retryAttempts
                - timeout
          required:
            - nodes
            - edges
            - settings
        eventRuleInfo:
          type: object
          description: Information about event rules associated with the pipeline
          properties:
            triggerTypes:
              type: array
              description: Types of triggers for the pipeline
              items:
                type: string
              example: ["Event Triggered"]
            eventRules:
              type: array
              description: Event rules associated with the pipeline
              items:
                type: object
                properties:
                  ruleName:
                    type: string
                    description: Name of the event rule
                    example: "default-image-pipeline-rule"
                  description:
                    type: string
                    description: Description of the event rule
                    example: "Triggers on image files (TIF, JPG, JPEG, PNG, WEBP, GIF, SVG)"
                  fileTypes:
                    type: array
                    description: File types that trigger the rule
                    items:
                      type: string
                    example: ["TIF", "JPG", "JPEG", "PNG", "WEBP", "GIF", "SVG"]
                  eventType:
                    type: string
                    description: Type of event that triggers the rule
                    example: "AssetCreated"
          required:
            - triggerTypes
            - eventRules
        stateMachineArn:
          type: string
          description: ARN of the state machine
          example: "arn:aws:states:us-east-1:123456789012:stateMachine:video-analysis-pipeline"
        dependentResources:
          type: array
          description: List of dependent resources
          items:
            type: array
            items:
              type: string
            example:
              [
                "eventbridge_rule",
                "arn:aws:events:us-east-1:123456789012:rule/default-image-pipeline-rule",
              ]
      required:
        - id
        - name
        - status
        - createdAt
        - updatedAt
        - configuration

    PipelineCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the pipeline
          example: "Video Analysis Pipeline"
        description:
          type: string
          description: Description of the pipeline
          example: "Analyzes video content using AI services"
        active:
          type: boolean
          description: Whether the pipeline is active
          example: true
        configuration:
          type: object
          description: Pipeline configuration
          properties:
            nodes:
              type: array
              description: List of nodes in the pipeline
              items:
                $ref: "#/components/schemas/PipelineNode"
            edges:
              type: array
              description: List of connections between nodes
              items:
                $ref: "#/components/schemas/PipelineEdge"
            settings:
              type: object
              description: Pipeline settings
              properties:
                autoStart:
                  type: boolean
                  description: Whether the pipeline should start automatically
                  example: true
                retryAttempts:
                  type: integer
                  description: Number of retry attempts
                  example: 3
                timeout:
                  type: integer
                  description: Timeout in seconds
                  example: 300
              required:
                - autoStart
                - retryAttempts
                - timeout
          required:
            - nodes
            - edges
            - settings
        loadFromS3:
          type: boolean
          description: Whether to load the pipeline definition from S3
          example: false
        definitionFile:
          type: object
          description: S3 file containing the pipeline definition
          properties:
            bucket:
              type: string
              description: S3 bucket name
              example: "medialake-pipeline-definitions"
            key:
              type: string
              description: S3 object key
              example: "video-analysis-pipeline.json"
          required:
            - bucket
            - key
      required:
        - name
        - configuration

    PipelineUpdate:
      type: object
      properties:
        pipeline_id:
          type: string
          format: uuid
          description: ID of the pipeline to update
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        name:
          type: string
          description: Name of the pipeline
          example: "Video Analysis Pipeline"
        description:
          type: string
          description: Description of the pipeline
          example: "Analyzes video content using AI services"
        active:
          type: boolean
          description: Whether the pipeline is active
          example: true
        configuration:
          type: object
          description: Pipeline configuration
          properties:
            nodes:
              type: array
              description: List of nodes in the pipeline
              items:
                $ref: "#/components/schemas/PipelineNode"
            edges:
              type: array
              description: List of connections between nodes
              items:
                $ref: "#/components/schemas/PipelineEdge"
            settings:
              type: object
              description: Pipeline settings
              properties:
                autoStart:
                  type: boolean
                  description: Whether the pipeline should start automatically
                  example: true
                retryAttempts:
                  type: integer
                  description: Number of retry attempts
                  example: 3
                timeout:
                  type: integer
                  description: Timeout in seconds
                  example: 300
              required:
                - autoStart
                - retryAttempts
                - timeout
          required:
            - nodes
            - edges
            - settings
      required:
        - pipeline_id
        - configuration

    PipelineNode:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the node within the pipeline
          example: "node_1"
        type:
          type: string
          description: Type of node
          example: "trigger"
        position:
          type: object
          description: Position of the node in the pipeline designer
          properties:
            x:
              type: number
              description: X coordinate
              example: 100
            y:
              type: number
              description: Y coordinate
              example: 200
          required:
            - x
            - y
        data:
          type: object
          description: Configuration data for the node
          properties:
            id:
              type: string
              description: Node identifier
              example: "trigger_1"
            type:
              type: string
              description: Node type
              example: "trigger"
            nodeId:
              type: string
              description: Reference to the system node ID
              example: "s3_event_trigger"
            label:
              type: string
              description: Display label for the node
              example: "S3 Event Trigger"
            configuration:
              type: object
              description: Node-specific configuration
              additionalProperties: true
          required:
            - id
            - type
            - nodeId
        width:
          type: string
          description: Width of the node in the designer
          example: "200"
        height:
          type: string
          description: Height of the node in the designer
          example: "100"
      required:
        - id
        - type
        - data

    PipelineEdge:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the edge
          example: "edge_1"
        source:
          type: string
          description: ID of the source node
          example: "node_1"
        target:
          type: string
          description: ID of the target node
          example: "node_2"
        sourceHandle:
          type: string
          description: Handle identifier on the source node
          example: "output"
        targetHandle:
          type: string
          description: Handle identifier on the target node
          example: "input"
        data:
          type: object
          description: Additional data for the edge
          additionalProperties: true
      required:
        - id
        - source
        - target

    PipelineExecution:
      type: object
      properties:
        executionId:
          type: string
          format: uuid
          description: Unique identifier for the execution
          example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
        pipelineId:
          type: string
          format: uuid
          description: ID of the pipeline
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        pipelineName:
          type: string
          description: Name of the pipeline
          example: "Video Analysis Pipeline"
        status:
          type: string
          description: Status of the execution
          enum: ["RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "TIMED_OUT"]
          example: "SUCCEEDED"
        startTime:
          type: string
          format: date-time
          description: Start timestamp
          example: "2023-01-01T12:00:00Z"
        endTime:
          type: string
          format: date-time
          description: End timestamp
          example: "2023-01-01T12:05:30Z"
        input:
          type: object
          description: Input parameters for the execution
          properties:
            assetIds:
              type: array
              description: IDs of assets processed
              items:
                type: string
                format: uuid
              example: ["c3d4e5f6-g7h8-9012-abcd-ef3456789012"]
            parameters:
              type: object
              description: Additional parameters
              additionalProperties: true
          required:
            - assetIds
        output:
          type: object
          description: Output results from the execution
          additionalProperties: true
        nodeExecutions:
          type: array
          description: Execution details for each node
          items:
            type: object
            properties:
              nodeId:
                type: string
                description: ID of the node
                example: "node_1"
              status:
                type: string
                description: Status of the node execution
                enum: ["RUNNING", "SUCCEEDED", "FAILED", "SKIPPED"]
                example: "SUCCEEDED"
              startTime:
                type: string
                format: date-time
                description: Start timestamp
                example: "2023-01-01T12:00:10Z"
              endTime:
                type: string
                format: date-time
                description: End timestamp
                example: "2023-01-01T12:03:45Z"
              input:
                type: object
                description: Input to the node
                additionalProperties: true
              output:
                type: object
                description: Output from the node
                additionalProperties: true
              error:
                type: object
                description: Error details if the node failed
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Failed to process video"
                  code:
                    type: string
                    description: Error code
                    example: "PROCESSING_ERROR"
                  details:
                    type: object
                    description: Additional error details
                    additionalProperties: true
            required:
              - nodeId
              - status
      required:
        - executionId
        - pipelineId
        - status
        - startTime
    # Review Schemas
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the review
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        assetId:
          type: string
          format: uuid
          description: ID of the asset being reviewed
          example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
        title:
          type: string
          description: Title of the review
          example: "Q1 Marketing Video Review"
        description:
          type: string
          description: Description of the review
          example: "Review of the Q1 marketing campaign video"
        status:
          type: string
          description: Status of the review
          enum:
            ["draft", "in_review", "approved", "rejected", "changes_requested"]
          example: "in_review"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        createdBy:
          type: string
          description: ID of the user who created the review
          example: "12345678-1234-1234-1234-123456789012"
        assignedTo:
          type: array
          description: IDs of users assigned to the review
          items:
            type: string
            format: uuid
          example: ["23456789-2345-2345-2345-234567890123"]
        metadata:
          type: object
          description: Additional metadata for the review
          additionalProperties: true
      required:
        - id
        - assetId
        - title
        - status
        - createdAt
        - updatedAt
        - createdBy

    ReviewUpdate:
      type: object
      properties:
        title:
          type: string
          description: Title of the review
          example: "Q1 Marketing Video Review"
        description:
          type: string
          description: Description of the review
          example: "Review of the Q1 marketing campaign video"
        assignedTo:
          type: array
          description: IDs of users assigned to the review
          items:
            type: string
            format: uuid
          example: ["23456789-2345-2345-2345-234567890123"]
        metadata:
          type: object
          description: Additional metadata for the review
          additionalProperties: true

    ReviewAnnotation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the annotation
          example: "c3d4e5f6-g7h8-9012-abcd-ef3456789012"
        reviewId:
          type: string
          format: uuid
          description: ID of the review this annotation belongs to
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        userId:
          type: string
          format: uuid
          description: ID of the user who created the annotation
          example: "12345678-1234-1234-1234-123456789012"
        type:
          type: string
          description: Type of annotation
          enum: ["comment", "drawing", "timestamp", "region"]
          example: "comment"
        content:
          type: string
          description: Content of the annotation
          example: "The logo should be larger in this section"
        timestamp:
          type: number
          description: Timestamp in media (seconds)
          example: 45.2
        position:
          type: object
          description: Position data for spatial annotations
          properties:
            x:
              type: number
              description: X coordinate (normalized 0-1)
              example: 0.5
            y:
              type: number
              description: Y coordinate (normalized 0-1)
              example: 0.3
            width:
              type: number
              description: Width (normalized 0-1)
              example: 0.2
            height:
              type: number
              description: Height (normalized 0-1)
              example: 0.1
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        metadata:
          type: object
          description: Additional metadata for the annotation
          additionalProperties: true
      required:
        - id
        - reviewId
        - userId
        - type
        - createdAt

    ReviewAnnotationUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the annotation (required for updates)
          example: "c3d4e5f6-g7h8-9012-abcd-ef3456789012"
        type:
          type: string
          description: Type of annotation
          enum: ["comment", "drawing", "timestamp", "region"]
          example: "comment"
        content:
          type: string
          description: Content of the annotation
          example: "The logo should be larger in this section"
        timestamp:
          type: number
          description: Timestamp in media (seconds)
          example: 45.2
        position:
          type: object
          description: Position data for spatial annotations
          properties:
            x:
              type: number
              description: X coordinate (normalized 0-1)
              example: 0.5
            y:
              type: number
              description: Y coordinate (normalized 0-1)
              example: 0.3
            width:
              type: number
              description: Width (normalized 0-1)
              example: 0.2
            height:
              type: number
              description: Height (normalized 0-1)
              example: 0.1
        metadata:
          type: object
          description: Additional metadata for the annotation
          additionalProperties: true
      required:
        - id

    ReviewStatus:
      type: object
      properties:
        reviewId:
          type: string
          format: uuid
          description: ID of the review
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        status:
          type: string
          description: Current status of the review
          enum:
            ["draft", "in_review", "approved", "rejected", "changes_requested"]
          example: "in_review"
        updatedAt:
          type: string
          format: date-time
          description: Last status update timestamp
          example: "2023-01-02T14:30:00Z"
        updatedBy:
          type: string
          format: uuid
          description: ID of the user who last updated the status
          example: "12345678-1234-1234-1234-123456789012"
        comment:
          type: string
          description: Optional comment about the status change
          example: "Approved with minor changes"
      required:
        - reviewId
        - status
        - updatedAt
        - updatedBy

    ReviewStatusUpdate:
      type: object
      properties:
        status:
          type: string
          description: New status for the review
          enum:
            ["draft", "in_review", "approved", "rejected", "changes_requested"]
          example: "approved"
        comment:
          type: string
          description: Optional comment about the status change
          example: "Approved with minor changes"
      required:
        - status
    # Role Schemas
    Role:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the role
          example: "admin"
        name:
          type: string
          description: Display name of the role
          example: "Administrator"
        description:
          type: string
          description: Description of the role
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permissions assigned to the role
          items:
            $ref: "#/components/schemas/RolePermission"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        precedence:
          type: integer
          description: Role precedence (lower numbers have higher precedence)
          example: 0
        userCount:
          type: integer
          description: Number of users assigned to this role
          example: 5
      required:
        - id
        - name
        - permissions

    RoleCreate:
      type: object
      properties:
        roleName:
          type: string
          description: Name of the role
          example: "Administrator"
        description:
          type: string
          description: Description of the role
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permission IDs to assign to the role
          items:
            type: string
          example: ["assets:read", "assets:write", "users:read"]
        precedence:
          type: integer
          description: Role precedence (lower numbers have higher precedence)
          example: 0
      required:
        - roleName

    RoleUpdate:
      type: object
      properties:
        roleName:
          type: string
          description: Name of the role
          example: "Administrator"
        description:
          type: string
          description: Description of the role
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permission IDs to assign to the role
          items:
            type: string
          example: ["assets:read", "assets:write", "users:read"]
        precedence:
          type: integer
          description: Role precedence (lower numbers have higher precedence)
          example: 0

    RolePermission:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the permission
          example: "assets:read"
        name:
          type: string
          description: Display name of the permission
          example: "Read Assets"
        description:
          type: string
          description: Description of the permission
          example: "Allows viewing asset details and metadata"
        resource:
          type: string
          description: Resource the permission applies to
          example: "assets"
        action:
          type: string
          description: Action the permission allows
          example: "read"
      required:
        - id
        - name
        - resource
        - action
    # Search Schemas
    SearchResult:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the asset
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        InventoryID:
          type: string
          description: Inventory ID of the asset
          example: "asset:a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        assetType:
          type: string
          description: Type of the asset
          example: "image"
        format:
          type: string
          description: Format/extension of the asset
          example: "jpg"
        objectName:
          type: string
          description: Name of the file
          example: "sample_image.jpg"
        fullPath:
          type: string
          description: Full path to the file
          example: "images/2023/sample_image.jpg"
        bucket:
          type: string
          description: Storage bucket where the asset is stored
          example: "medialake-assets-123456789012"
        fileSize:
          type: integer
          description: Size of the file in bytes
          example: 1024000
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        score:
          type: number
          format: float
          description: Search relevance score
          example: 0.95
        thumbnailUrl:
          type: string
          description: Presigned URL for the thumbnail
          example: "https://medialake-assets-123456789012.s3.amazonaws.com/thumbnails/sample_image_thumb.jpg?X-Amz-Algorithm=..."
        proxyUrl:
          type: string
          description: Presigned URL for the proxy representation
          example: "https://medialake-assets-123456789012.s3.amazonaws.com/proxies/sample_image_proxy.jpg?X-Amz-Algorithm=..."
        metadata:
          type: object
          description: Consolidated metadata for the asset
          additionalProperties: true
        clips:
          type: array
          description: Clips associated with the asset (for video/audio)
          items:
            $ref: "#/components/schemas/SearchClipResult"
      required:
        - id
        - InventoryID
        - assetType
        - format
        - objectName
        - score

    SearchClipResult:
      type: object
      properties:
        assetType:
          type: string
          description: Type of the asset
          example: "video"
        format:
          type: string
          description: Format/extension of the asset
          example: "mp4"
        objectName:
          type: string
          description: Name of the file
          example: "sample_video.mp4"
        fullPath:
          type: string
          description: Full path to the file
          example: "videos/2023/sample_video.mp4"
        bucket:
          type: string
          description: Storage bucket where the asset is stored
          example: "medialake-assets-123456789012"
        fileSize:
          type: integer
          description: Size of the file in bytes
          example: 10240000
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        score:
          type: number
          format: float
          description: Search relevance score
          example: 0.95
        embedding_scope:
          type: string
          description: Scope of the embedding
          example: "clip"
        start_timecode:
          type: number
          description: Start time of the clip in seconds
          example: 30.5
        end_timecode:
          type: number
          description: End time of the clip in seconds
          example: 45.2
        type:
          type: string
          description: Type of the clip
          example: "video"
        timestamp:
          type: number
          description: Timestamp of the clip
          example: 37.85
        metadata:
          type: object
          description: Metadata for the clip
          additionalProperties: true
      required:
        - assetType
        - format
        - objectName
        - score
        - embedding_scope

    SearchMetadata:
      type: object
      properties:
        totalResults:
          type: integer
          description: Total number of results matching the query
          example: 120
        page:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Number of results per page
          example: 50
        searchTerm:
          type: string
          description: Original search term
          example: "sample image"
        facets:
          type: object
          description: Facet information for filtering
          properties:
            file_types:
              type: object
              description: File type facets
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "jpg"
                      doc_count:
                        type: integer
                        example: 45
            asset_types:
              type: object
              description: Asset type facets
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "image"
                      doc_count:
                        type: integer
                        example: 75
            file_extensions:
              type: object
              description: File extension facets
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "jpg"
                      doc_count:
                        type: integer
                        example: 45
            file_size_ranges:
              type: object
              description: File size range facets
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "1MB - 10MB"
                      from:
                        type: integer
                        example: 1048576
                      to:
                        type: integer
                        example: 10485760
                      doc_count:
                        type: integer
                        example: 30
            ingestion_date:
              type: object
              description: Ingestion date facets
              properties:
                buckets:
                  type: array
                  items:
                    type: object
                    properties:
                      key_as_string:
                        type: string
                        example: "2023-01-01"
                      key:
                        type: integer
                        example: 1672531200000
                      doc_count:
                        type: integer
                        example: 15
        suggestions:
          type: object
          description: Search suggestions
          additionalProperties: true
      required:
        - totalResults
        - page
        - pageSize
        - searchTerm

    SearchFieldInfo:
      type: object
      properties:
        name:
          type: string
          description: Field name/path
          example: "DigitalSourceAsset.Type"
        displayName:
          type: string
          description: Display name for the field
          example: "Asset Type"
        description:
          type: string
          description: Description of the field
          example: "Type of the asset (image, video, audio, document)"
        type:
          type: string
          description: Data type of the field
          enum: ["string", "number", "date", "boolean", "object", "array"]
          example: "string"
        isDefault:
          type: boolean
          description: Whether this field is included in default searches
          example: true
      required:
        - name
        - displayName
        - description
        - type
        - isDefault
    # Settings Schemas
    SettingsSearchProvider:
      type: object
      properties:
        provider:
          type: string
          description: Search provider type
          enum: ["opensearch", "kendra", "s3_vector"]
          example: "opensearch"
        endpoint:
          type: string
          description: Search provider endpoint
          example: "https://search-medialake-abc123.us-east-1.es.amazonaws.com"
        index:
          type: string
          description: Search index name
          example: "medialake-assets"
        region:
          type: string
          description: AWS region for the search provider
          example: "us-east-1"
        configuration:
          type: object
          description: Additional provider-specific configuration
          additionalProperties: true
      required:
        - provider

    SettingsSearch:
      type: object
      properties:
        provider:
          type: string
          description: Search provider type
          enum: ["opensearch", "kendra", "s3_vector"]
          example: "opensearch"
        defaultFields:
          type: array
          description: Default search fields
          items:
            type: string
          example:
            [
              "DigitalSourceAsset.Type",
              "DigitalSourceAsset.MainRepresentation.Format",
            ]
        semanticSearchEnabled:
          type: boolean
          description: Whether semantic search is enabled
          example: true
        facetsEnabled:
          type: boolean
          description: Whether faceted search is enabled
          example: true
        configuration:
          type: object
          description: Additional search-specific configuration
          additionalProperties: true
      required:
        - provider

    SettingsSearchUpdate:
      type: object
      properties:
        provider:
          type: string
          description: Search provider type
          enum: ["opensearch", "kendra", "s3_vector"]
          example: "opensearch"
        defaultFields:
          type: array
          description: Default search fields
          items:
            type: string
          example:
            [
              "DigitalSourceAsset.Type",
              "DigitalSourceAsset.MainRepresentation.Format",
            ]
        semanticSearchEnabled:
          type: boolean
          description: Whether semantic search is enabled
          example: true
        facetsEnabled:
          type: boolean
          description: Whether faceted search is enabled
          example: true
        configuration:
          type: object
          description: Additional search-specific configuration
          additionalProperties: true
      required:
        - provider

    SettingsUser:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: "john.doe"
        enabled:
          type: boolean
          description: Whether the user is enabled
          example: true
        status:
          type: string
          description: Status of the user
          enum:
            [
              "CONFIRMED",
              "UNCONFIRMED",
              "ARCHIVED",
              "COMPROMISED",
              "UNKNOWN",
              "RESET_REQUIRED",
              "FORCE_CHANGE_PASSWORD",
            ]
          example: "CONFIRMED"
        created:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        modified:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        email_verified:
          type: boolean
          description: Whether the email address is verified
          example: true
        name:
          type: string
          description: First name of the user
          example: "John"
        family_name:
          type: string
          description: Last name of the user
          example: "Doe"
        groups:
          type: array
          description: Groups the user belongs to
          items:
            type: string
          example: ["admin", "editor"]
      required:
        - username
        - enabled
        - status

    SettingsUserCreate:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
          example: "john.doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        name:
          type: string
          description: First name of the user
          example: "John"
        family_name:
          type: string
          description: Last name of the user
          example: "Doe"
        groups:
          type: array
          description: Groups to assign the user to
          items:
            type: string
          example: ["editor"]
        temporary_password:
          type: string
          description: Temporary password for the user
          example: "TemporaryP@ss123"
      required:
        - username
        - email

    SettingsUserUpdate:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the user is enabled
          example: true
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        name:
          type: string
          description: First name of the user
          example: "John"
        family_name:
          type: string
          description: Last name of the user
          example: "Doe"
        groups:
          type: array
          description: Groups to assign the user to
          items:
            type: string
          example: ["editor", "viewer"]

    SettingsRole:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the role
          example: "admin"
        name:
          type: string
          description: Display name of the role
          example: "Administrator"
        description:
          type: string
          description: Description of the role
          example: "Full system administrator with all permissions"
        permissions:
          type: array
          description: List of permissions assigned to the role
          items:
            type: string
          example: ["assets:read", "assets:write", "users:read"]
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        userCount:
          type: integer
          description: Number of users assigned to this role
          example: 5
      required:
        - id
        - name
    # User Schemas
    UserProfile:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: "12345678-1234-1234-1234-123456789012"
        displayName:
          type: string
          description: Display name of the user
          example: "John Doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
        preferences:
          type: object
          description: User preferences
          properties:
            theme:
              type: string
              description: UI theme preference
              enum: ["light", "dark", "system"]
              example: "system"
            language:
              type: string
              description: Language preference
              example: "en-US"
            notifications:
              type: object
              description: Notification preferences
              properties:
                email:
                  type: boolean
                  description: Whether to receive email notifications
                  example: true
                inApp:
                  type: boolean
                  description: Whether to receive in-app notifications
                  example: true
          additionalProperties: true
      required:
        - userId

    UserProfileUpdate:
      type: object
      properties:
        displayName:
          type: string
          description: Display name of the user
          example: "John Doe"
        preferences:
          type: object
          description: User preferences
          properties:
            theme:
              type: string
              description: UI theme preference
              enum: ["light", "dark", "system"]
              example: "dark"
            language:
              type: string
              description: Language preference
              example: "en-US"
            notifications:
              type: object
              description: Notification preferences
              properties:
                email:
                  type: boolean
                  description: Whether to receive email notifications
                  example: true
                inApp:
                  type: boolean
                  description: Whether to receive in-app notifications
                  example: true
          additionalProperties: true

    UserFavorites:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: "12345678-1234-1234-1234-123456789012"
        favorites:
          type: array
          description: List of favorites
          items:
            $ref: "#/components/schemas/UserFavorite"
        count:
          type: integer
          description: Total number of favorites
          example: 5
      required:
        - userId
        - favorites
        - count

    UserFavorite:
      type: object
      properties:
        favoriteId:
          type: string
          description: Unique identifier for the favorite
          example: "20230101120000"
        itemId:
          type: string
          description: ID of the favorited item
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        itemType:
          type: string
          description: Type of the favorited item
          example: "asset"
        addedAt:
          type: string
          format: date-time
          description: Timestamp when the item was favorited
          example: "2023-01-01T12:00:00Z"
        metadata:
          type: object
          description: Additional metadata for the favorite
          additionalProperties: true
      required:
        - favoriteId
        - itemId
        - itemType
        - addedAt

    UserFavoriteAdd:
      type: object
      properties:
        itemId:
          type: string
          description: ID of the item to favorite
          example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        itemType:
          type: string
          description: Type of the item to favorite
          example: "asset"
        metadata:
          type: object
          description: Additional metadata for the favorite
          additionalProperties: true
      required:
        - itemId
        - itemType

    UserSettings:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
          example: "12345678-1234-1234-1234-123456789012"
        theme:
          type: string
          description: UI theme preference
          enum: ["light", "dark", "system"]
          example: "system"
        language:
          type: string
          description: Language preference
          example: "en-US"
        defaultView:
          type: string
          description: Default view for assets
          enum: ["grid", "list", "details"]
          example: "grid"
        thumbnailSize:
          type: string
          description: Thumbnail size preference
          enum: ["small", "medium", "large"]
          example: "medium"
        notifications:
          type: object
          description: Notification settings
          properties:
            email:
              type: boolean
              description: Whether to receive email notifications
              example: true
            inApp:
              type: boolean
              description: Whether to receive in-app notifications
              example: true
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-02T14:30:00Z"
      required:
        - userId

    UserSettingsUpdate:
      type: object
      properties:
        theme:
          type: string
          description: UI theme preference
          enum: ["light", "dark", "system"]
          example: "dark"
        language:
          type: string
          description: Language preference
          example: "en-US"
        defaultView:
          type: string
          description: Default view for assets
          enum: ["grid", "list", "details"]
          example: "list"
        thumbnailSize:
          type: string
          description: Thumbnail size preference
          enum: ["small", "medium", "large"]
          example: "large"
        notifications:
          type: object
          description: Notification settings
          properties:
            email:
              type: boolean
              description: Whether to receive email notifications
              example: false
            inApp:
              type: boolean
              description: Whether to receive in-app notifications
              example: true

    CurrentUser:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: "12345678-1234-1234-1234-123456789012"
        username:
          type: string
          description: Username of the user
          example: "john.doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        name:
          type: string
          description: First name of the user
          example: "John"
        familyName:
          type: string
          description: Last name of the user
          example: "Doe"
        groups:
          type: array
          description: Groups the user belongs to
          items:
            type: string
          example: ["editor", "viewer"]
        permissions:
          type: array
          description: Permissions assigned to the user
          items:
            type: string
          example: ["assets:read", "assets:write", "users:read"]
      required:
        - id
        - username
        - email
    # Error Schemas
    Error:
      type: object
      description: Standard error response format
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          example: "RESOURCE_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "The requested resource was not found"
        details:
          type: object
          description: Additional error details (optional)
          additionalProperties: true
      required:
        - code
        - message

    ValidationError:
      type: object
      description: Validation error response format
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "One or more validation errors occurred"
        errors:
          type: array
          description: List of validation errors
          items:
            type: object
            properties:
              field:
                type: string
                description: The field that failed validation
                example: "name"
              message:
                type: string
                description: Validation error message
                example: "Field is required"
      required:
        - code
        - message
        - errors

    AuthenticationError:
      type: object
      description: Authentication error response format
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          example: "AUTHENTICATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Authentication failed"
      required:
        - code
        - message

    AuthorizationError:
      type: object
      description: Authorization error response format
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          example: "AUTHORIZATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "You do not have permission to access this resource"
      required:
        - code
        - message

    ServerError:
      type: object
      description: Server error response format
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          example: "SERVER_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "An unexpected error occurred"
        requestId:
          type: string
          description: Request ID for tracking the error
          example: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p" # pragma: allowlist secret
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Bad Request - The request was invalid or cannot be served
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"

    Unauthorized:
      description: Unauthorized - Authentication is required or has failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthenticationError"

    Forbidden:
      description: Forbidden - The server understood the request but refuses to authorize it
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorizationError"

    NotFound:
      description: Not Found - The requested resource could not be found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal Server Error - An unexpected condition was encountered
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerError"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: Status of the operation
                example: "422"
              message:
                type: string
                description: Error message
                example: "Invalid data"
              data:
                type: object
                properties:
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        loc:
                          type: array
                          items:
                            type: string
                          example: ["body", "name"]
                        msg:
                          type: string
                          example: "field required"
                        type:
                          type: string
                          example: "value_error.missing"
                    description: Validation error details
                required:
                  - details
            required:
              - status
              - message
              - data

  securitySchemes:
    CognitoAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Authentication using Amazon Cognito User Pools.

        ## Token Format
        The Authorization header must contain a valid JWT token with the 'Bearer ' prefix.

        Example: `Authorization: Bearer eyJraWQiOiJrZXkxIiwiYWxnIjoiUlMyNTYifQ...`

        ## Token Requirements
        - The token must be issued by the MediaLake Cognito User Pool
        - The token must not be expired
        - The token must contain the required scopes for the requested operation
        - The token must include user identity information in the claims

        ## Token Claims
        The JWT token contains the following standard claims:
        - `sub`: Subject (Cognito user ID)
        - `iss`: Issuer (Cognito User Pool URL)
        - `exp`: Expiration time
        - `iat`: Issued at time
        - `token_use`: Type of token (access or id)

        And the following custom claims:
        - `username`: The user's username
        - `cognito:groups`: Array of groups the user belongs to
        - `custom:role`: The user's role in the system

    XOriginVerify:
      type: apiKey
      in: header
      name: X-Origin-Verify
      description: |
        Origin verification header used for additional security validation.

        ## Purpose
        This header is used to verify that API requests are coming from authorized origins.
        It helps prevent cross-site request forgery (CSRF) attacks and unauthorized API usage.

        ## Header Format
        The X-Origin-Verify header must contain a valid verification token that matches
        the expected value configured in the API Gateway.

        Example: `X-Origin-Verify: a1b2c3d4-e5f6-7890-abcd-ef1234567890`

        ## Requirements
        - The token must be included in all API requests
        - The token must match the expected value
        - The token is typically generated by the MediaLake frontend application
        - API requests without this header or with an invalid token will be rejected

paths:
  /assets:
    get:
      operationId: getAssets
      summary: List assets
      description: |
        Retrieves a paginated list of assets from the system.
        This endpoint supports filtering, sorting, and pagination using tokens.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return per page (1-50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          example: 20
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: sort
          in: query
          description: Sort order for results
          required: false
          schema:
            type: string
            enum: ["timestamp:desc", "timestamp:asc"]
            default: "timestamp:desc"
          example: "timestamp:desc"
        - name: filter
          in: query
          description: Filter expression for assets
          required: false
          schema:
            type: string
          example: "type:image"
        - name: pagination_token
          in: query
          description: Token for pagination (from previous response)
          required: false
          schema:
            type: string
          example: "eyJJRCI6eyJTIjoiYXNzZXQ6aW1nOmFiY2RlZiJ9fQ==" # pragma: allowlist secret
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/{id}:
    parameters:
      - name: id
        in: path
        description: Unique identifier of the asset (InventoryID)
        required: true
        schema:
          type: string
        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    get:
      operationId: getAssetById
      summary: Get asset by ID
      description: |
        Retrieves detailed information about a specific asset by its unique identifier.
        This endpoint returns the complete asset object including all metadata, properties,
        and derived representations with presigned URLs for access.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetDetailResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteAsset
      summary: Delete asset
      description: |
        Deletes an asset from the system. This operation is irreversible.
        It removes the asset from DynamoDB, OpenSearch, and S3 storage.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Asset deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetSuccessResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/{id}/rename:
    parameters:
      - name: id
        in: path
        description: Unique identifier of the asset
        required: true
        schema:
          type: string
        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    post:
      operationId: renameAsset
      summary: Rename asset
      description: |
        Renames an asset in the system.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetRenameRequest"
      responses:
        "200":
          description: Asset renamed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetSuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/{id}/relatedversions:
    parameters:
      - name: id
        in: path
        description: Unique identifier of the asset
        required: true
        schema:
          type: string
        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    get:
      operationId: getRelatedVersions
      summary: Get related versions
      description: |
        Retrieves a list of assets that are related versions of the specified asset.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Related versions retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetRelatedVersionsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/{id}/transcript:
    parameters:
      - name: id
        in: path
        description: Unique identifier of the asset
        required: true
        schema:
          type: string
        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"

    get:
      operationId: getTranscript
      summary: Get asset transcript
      description: |
        Retrieves the transcript for an audio or video asset.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Transcript retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetTranscriptResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/generate-presigned-url:
    post:
      operationId: generatePresignedUrl
      summary: Generate presigned URL
      description: |
        Generates a presigned URL for downloading an asset.
        This endpoint allows specifying which representation of the asset to download
        (original/master or a derived representation like thumbnail or proxy).
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetPresignedUrlRequest"
      responses:
        "200":
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetPresignedUrlResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/upload:
    post:
      operationId: uploadAsset
      summary: Upload asset
      description: |
        Initiates an asset upload process by generating a presigned URL for S3 upload.
        The client can then use this URL to upload the asset directly to S3.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetUploadRequest"
      responses:
        "200":
          description: Upload URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetUploadResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/download/bulk:
    post:
      operationId: bulkDownload
      summary: Bulk download assets
      description: |
        Initiates a bulk download job for multiple assets.
        The assets will be packaged into a ZIP file and made available for download.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetBulkDownloadRequest"
      responses:
        "202":
          description: Bulk download job initiated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetBulkDownloadJobResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/download/bulk/{jobId}:
    parameters:
      - name: jobId
        in: path
        description: Bulk download job ID
        required: true
        schema:
          type: string
        example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"

    get:
      operationId: getBulkDownloadStatus
      summary: Get bulk download status
      description: |
        Retrieves the status of a bulk download job.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Bulk download status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetBulkDownloadStatusResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /assets/download/bulk/user:
    get:
      operationId: getUserBulkDownloads
      summary: Get user bulk downloads
      description: |
        Retrieves a list of bulk download jobs initiated by the current user.
      tags:
        - Assets
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: User bulk downloads retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetUserBulkDownloadsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/permission-sets:
    get:
      operationId: getAuthorizationPermissionSets
      summary: List permission sets
      description: |
        Retrieves a list of all permission sets configured in the system.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission sets retrieved successfully"
                  data:
                    type: array
                    description: List of permission sets
                    items:
                      $ref: "#/components/schemas/AuthorizationPermissionSet"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createAuthorizationPermissionSet
      summary: Create permission set
      description: |
        Creates a new permission set in the system.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationPermissionSetCreate"
      responses:
        "201":
          description: Permission set created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set created successfully"
                  data:
                    $ref: "#/components/schemas/AuthorizationPermissionSet"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "error"
                  message:
                    type: string
                    description: Error message
                    example: "Permission set already exists"
                required:
                  - status
                  - message
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/permission-sets/{permissionSetId}:
    parameters:
      - name: permissionSetId
        in: path
        description: Permission Set ID
        required: true
        schema:
          type: string

    get:
      operationId: getAuthorizationPermissionSetById
      summary: Get permission set by ID
      description: |
        Retrieves detailed information about a specific permission set.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set retrieved successfully"
                  data:
                    $ref: "#/components/schemas/AuthorizationPermissionSet"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateAuthorizationPermissionSet
      summary: Update permission set
      description: |
        Updates an existing permission set with new information.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationPermissionSetUpdate"
      responses:
        "200":
          description: Permission set updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set updated successfully"
                  data:
                    $ref: "#/components/schemas/AuthorizationPermissionSet"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteAuthorizationPermissionSet
      summary: Delete permission set
      description: |
        Deletes a permission set from the system.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Permission set deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/assignments/users/{userId}:
    parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string

    get:
      operationId: getUserAssignments
      summary: Get user assignments
      description: |
        Retrieves permission sets assigned to a specific user.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User assignments retrieved successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        description: ID of the user
                        example: "12345678-1234-1234-1234-123456789012"
                      permissionSets:
                        type: array
                        description: List of permission sets assigned to the user
                        items:
                          $ref: "#/components/schemas/AuthorizationPermissionSet"
                    required:
                      - userId
                      - permissionSets
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: assignAuthorizationPermissionSetsToUser
      summary: Assign permission sets to user
      description: |
        Assigns permission sets to a specific user.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionSetIds:
                  type: array
                  description: IDs of permission sets to assign
                  items:
                    type: string
                  example: ["admin", "editor"]
              required:
                - permissionSetIds
      responses:
        "200":
          description: Permission sets assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission sets assigned successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        description: ID of the user
                        example: "12345678-1234-1234-1234-123456789012"
                      assignedPermissionSets:
                        type: array
                        description: List of permission set IDs assigned to the user
                        items:
                          type: string
                        example: ["admin", "editor"]
                    required:
                      - userId
                      - assignedPermissionSets
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/assignments/users/{userId}/permission-sets/{permissionSetId}:
    parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      - name: permissionSetId
        in: path
        description: Permission Set ID
        required: true
        schema:
          type: string

    delete:
      operationId: removeAuthorizationPermissionSetFromUser
      summary: Remove permission set from user
      description: |
        Removes a permission set from a specific user.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Permission set removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set removed successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        description: ID of the user
                        example: "12345678-1234-1234-1234-123456789012"
                      permissionSetId:
                        type: string
                        description: ID of the removed permission set
                        example: "admin"
                    required:
                      - userId
                      - permissionSetId
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/assignments/groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string

    get:
      operationId: getGroupAssignments
      summary: Get group assignments
      description: |
        Retrieves permission sets assigned to a specific group.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Group assignments retrieved successfully"
                  data:
                    type: object
                    properties:
                      groupId:
                        type: string
                        description: ID of the group
                        example: "admin-group"
                      permissionSets:
                        type: array
                        description: List of permission sets assigned to the group
                        items:
                          $ref: "#/components/schemas/AuthorizationPermissionSet"
                    required:
                      - groupId
                      - permissionSets
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: assignAuthorizationPermissionSetsToGroup
      summary: Assign permission sets to group
      description: |
        Assigns permission sets to a specific group.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionSetIds:
                  type: array
                  description: IDs of permission sets to assign
                  items:
                    type: string
                  example: ["admin", "editor"]
              required:
                - permissionSetIds
      responses:
        "200":
          description: Permission sets assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission sets assigned successfully"
                  data:
                    type: object
                    properties:
                      groupId:
                        type: string
                        description: ID of the group
                        example: "admin-group"
                      assignedPermissionSets:
                        type: array
                        description: List of permission set IDs assigned to the group
                        items:
                          type: string
                        example: ["admin", "editor"]
                    required:
                      - groupId
                      - assignedPermissionSets
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /authorization/assignments/groups/{groupId}/permission-sets/{permissionSetId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
      - name: permissionSetId
        in: path
        description: Permission Set ID
        required: true
        schema:
          type: string

    delete:
      operationId: removeAuthorizationPermissionSetFromGroup
      summary: Remove permission set from group
      description: |
        Removes a permission set from a specific group.
      tags:
        - Authorization
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Permission set removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set removed successfully"
                  data:
                    type: object
                    properties:
                      groupId:
                        type: string
                        description: ID of the group
                        example: "admin-group"
                      permissionSetId:
                        type: string
                        description: ID of the removed permission set
                        example: "admin"
                    required:
                      - groupId
                      - permissionSetId
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /aws/regions:
    get:
      operationId: getAwsRegions
      summary: List AWS regions
      description: |
        Retrieves a list of available AWS regions that the account has opted into.
        The regions are sorted alphabetically by name.
      tags:
        - AWS
      security:
        - CognitoAuth: []
        - XOriginVerify: []
      responses:
        "200":
          description: Regions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Status message
                    example: "Regions retrieved successfully"
                  data:
                    type: object
                    properties:
                      regions:
                        type: array
                        description: List of available AWS regions
                        items:
                          type: object
                          properties:
                            value:
                              type: string
                              description: Region name
                              example: "us-east-1"
                            label:
                              type: string
                              description: Region display name
                              example: "us-east-1"
                          required:
                            - value
                            - label
                    required:
                      - regions
                required:
                  - message
                  - data
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Failed to retrieve AWS regions"
                required:
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /connectors:
    get:
      operationId: getConnectors
      summary: List connectors
      description: |
        Retrieves a list of all connectors configured in the system.
      tags:
        - Connectors
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      connectors:
                        type: array
                        description: List of connectors
                        items:
                          $ref: "#/components/schemas/Connector"
                    required:
                      - connectors
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createConnector
      summary: Create connector
      description: |
        Creates a new connector for ingesting media assets.
      tags:
        - Connectors
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorCreate"
      responses:
        "201":
          description: Connector created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "201"
                  message:
                    type: string
                    description: Status message
                    example: "Connector created successfully"
                  data:
                    $ref: "#/components/schemas/Connector"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /connectors/{connector_id}:
    parameters:
      - name: connector_id
        in: path
        description: Connector ID
        required: true
        schema:
          type: string
          format: uuid

    delete:
      operationId: deleteConnector
      summary: Delete connector
      description: |
        Deletes a connector from the system and cleans up associated resources.
      tags:
        - Connectors
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Connector deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Status message
                    example: "Connector deleted successfully"
                required:
                  - message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /connectors/{connector_id}/sync:
    parameters:
      - name: connector_id
        in: path
        description: Connector ID
        required: true
        schema:
          type: string
          format: uuid

    post:
      operationId: syncConnector
      summary: Sync connector
      description: |
        Initiates a synchronization job for the connector.
      tags:
        - Connectors
      security:
        - CognitoAuth: []
      responses:
        "202":
          description: Sync job initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "202"
                  message:
                    type: string
                    description: Status message
                    example: "Sync job initiated successfully"
                  data:
                    type: object
                    properties:
                      jobId:
                        type: string
                        format: uuid
                        description: ID of the sync job
                        example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                    required:
                      - jobId
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /connectors/s3:
    get:
      operationId: getS3ConnectorBuckets
      summary: List S3 buckets
      description: |
        Lists available S3 buckets that can be used for connectors.
      tags:
        - S3 Connectors
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      buckets:
                        type: array
                        description: List of S3 buckets
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: Bucket name
                              example: "my-media-bucket"
                            region:
                              type: string
                              description: AWS region
                              example: "us-east-1"
                            creationDate:
                              type: string
                              format: date-time
                              description: Bucket creation date
                              example: "2023-01-01T12:00:00Z"
                          required:
                            - name
                    required:
                      - buckets
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createS3Connector
      summary: Create S3 connector
      description: |
        Creates a new S3 connector for ingesting media assets from an S3 bucket.
      tags:
        - S3 Connectors
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/S3ConnectorCreate"
      responses:
        "201":
          description: S3 connector created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "201"
                  message:
                    type: string
                    description: Status message
                    example: "S3 connector created successfully"
                  data:
                    $ref: "#/components/schemas/Connector"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /connectors/s3/explorer/{connector_id}:
    parameters:
      - name: connector_id
        in: path
        description: Connector ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: exploreS3Connector
      summary: Explore S3 connector
      description: |
        Explores the contents of an S3 bucket associated with a connector.
      tags:
        - S3 Connectors
      security:
        - CognitoAuth: []
      parameters:
        - name: prefix
          in: query
          description: S3 prefix to explore
          required: false
          schema:
            type: string
        - name: delimiter
          in: query
          description: Delimiter for S3 listing
          required: false
          schema:
            type: string
            default: "/"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      commonPrefixes:
                        type: array
                        description: List of common prefixes (folders)
                        items:
                          type: string
                          example: "media/"
                      contents:
                        type: array
                        description: List of objects
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              description: Object key
                              example: "media/image.jpg"
                            size:
                              type: integer
                              description: Object size in bytes
                              example: 1024000
                            lastModified:
                              type: string
                              format: date-time
                              description: Last modified timestamp
                              example: "2023-01-01T12:00:00Z"
                            etag:
                              type: string
                              description: Object ETag
                              example: '"d41d8cd98f00b204e9800998ecf8427e"'
                          required:
                            - key
                            - size
                            - lastModified
                      prefix:
                        type: string
                        description: Current prefix
                        example: "media/"
                      delimiter:
                        type: string
                        description: Delimiter used
                        example: "/"
                      isTruncated:
                        type: boolean
                        description: Whether the results are truncated
                        example: false
                      nextContinuationToken:
                        type: string
                        description: Token for pagination
                        example: "1ueGcxLPRx1Tr/XYExHnhbYLgveDs2J/wm36Hy4vbOwM=" # pragma: allowlist secret
                    required:
                      - commonPrefixes
                      - contents
                      - prefix
                      - delimiter
                      - isTruncated
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments:
    get:
      operationId: getEnvironments
      summary: List environments
      description: |
        Retrieves a list of all environments configured in the system.
      tags:
        - Environments
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code of the operation
                    example: 200
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      environments:
                        type: array
                        description: List of environments
                        items:
                          $ref: "#/components/schemas/Environment"
                    required:
                      - environments
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createEnvironment
      summary: Create environment
      description: |
        Creates a new environment in the system.
      tags:
        - Environments
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreate"
      responses:
        "201":
          description: Environment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Environment already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ConflictError"
                  message:
                    type: string
                    example: "Environment already exists"
                required:
                  - error
                  - message
        "500":
          $ref: "#/components/responses/InternalServerError"

  /environments/{id}:
    parameters:
      - name: id
        in: path
        description: Environment ID
        required: true
        schema:
          type: string
          format: uuid

    put:
      operationId: updateEnvironment
      summary: Update environment
      description: |
        Updates an existing environment with new information.
      tags:
        - Environments
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentUpdate"
      responses:
        "200":
          description: Environment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code of the operation
                    example: 200
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    $ref: "#/components/schemas/Environment"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteEnvironment
      summary: Delete environment
      description: |
        Deletes an environment from the system.
      tags:
        - Environments
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Environment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Status code of the operation
                    example: 200
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Environment deleted successfully"
                    required:
                      - message
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups:
    get:
      operationId: getGroups
      summary: List groups
      description: |
        Retrieves a list of all groups configured in the system.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Groups retrieved successfully"
                  data:
                    type: object
                    properties:
                      groups:
                        type: array
                        description: List of groups
                        items:
                          $ref: "#/components/schemas/GroupSummary"
                    required:
                      - groups
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: createGroup
      summary: Create group
      description: |
        Creates a new group in the system.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "201"
                  message:
                    type: string
                    description: Status message
                    example: "Group created successfully"
                  data:
                    $ref: "#/components/schemas/Group"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Group already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "409"
                  message:
                    type: string
                    example: "Group with ID 'admin' already exists"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
    get:
      operationId: getGroup
      summary: Get group
      description: |
        Retrieves details of a specific group.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Group retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Group"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      operationId: updateGroup
      summary: Update group
      description: |
        Updates an existing group with new information.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupUpdate"
      responses:
        "200":
          description: Group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Group updated successfully"
                  data:
                    $ref: "#/components/schemas/Group"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: deleteGroup
      summary: Delete group
      description: |
        Deletes a group from the system.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Group deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Group deleted successfully"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}/members:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
    get:
      operationId: getGroupMembers
      summary: Get group members
      description: |
        Retrieves the list of members in a group.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Group members retrieved successfully"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          $ref: "#/components/schemas/GroupMember"
                    required:
                      - members
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: addGroupMember
      summary: Add group member
      description: |
        Adds a user to a group.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID of the user to add to the group
              required:
                - userId
      responses:
        "200":
          description: User added to group successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "User added to group successfully"
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        description: ID of the added user
                      groupId:
                        type: string
                        description: ID of the group
                      addedAt:
                        type: string
                        format: date-time
                        description: Timestamp when the user was added to the group
                    required:
                      - userId
                      - groupId
                      - addedAt
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: User already in group
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "409"
                  message:
                    type: string
                    example: "User is already a member of this group"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{groupId}/members/{userId}:
    parameters:
      - name: groupId
        in: path
        description: Group ID
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
    delete:
      operationId: removeGroupMember
      summary: Remove group member
      description: |
        Removes a user from a group.
      tags:
        - Groups
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: User removed from group successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "User removed from group successfully"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /integrations:
    get:
      operationId: getIntegrations
      summary: List integrations
      description: |
        Retrieves a list of all integrations configured in the system.
      tags:
        - Integrations
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Integrations retrieved successfully"
                  data:
                    type: array
                    description: List of integrations
                    items:
                      $ref: "#/components/schemas/Integration"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      operationId: createIntegration
      summary: Create integration
      description: |
        Creates a new integration in the system.
      tags:
        - Integrations
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationCreate"
      responses:
        "201":
          description: Integration created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Integration created successfully"
                  data:
                    $ref: "#/components/schemas/Integration"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /integrations/{id}:
    parameters:
      - name: id
        in: path
        description: Integration ID
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: updateIntegration
      summary: Update integration
      description: |
        Updates an existing integration with new information.
      tags:
        - Integrations
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationUpdate"
      responses:
        "200":
          description: Integration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Integration updated successfully"
                  data:
                    $ref: "#/components/schemas/Integration"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      operationId: deleteIntegration
      summary: Delete integration
      description: |
        Deletes an integration from the system.
      tags:
        - Integrations
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Integration deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Integration deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /nodes:
    get:
      operationId: getNodes
      summary: List nodes
      description: |
        Retrieves a list of all nodes configured in the system.
      tags:
        - Nodes
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "ok"
                  message:
                    type: string
                    description: Status message
                    example: "Nodes retrieved successfully"
                  data:
                    type: array
                    description: List of nodes
                    items:
                      $ref: "#/components/schemas/NodeSummary"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /nodes/{id}:
    parameters:
      - name: id
        in: path
        description: Node ID
        required: true
        schema:
          type: string
    get:
      operationId: getNodeById
      summary: Get node by ID
      description: |
        Retrieves detailed information about a specific node.
      tags:
        - Nodes
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Node found"
                  data:
                    type: array
                    description: Node data (array with single item for backward compatibility)
                    items:
                      $ref: "#/components/schemas/Node"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /nodes/{id}/methods:
    parameters:
      - name: id
        in: path
        description: Node ID
        required: true
        schema:
          type: string
    get:
      operationId: getNodeMethods
      summary: Get node methods
      description: |
        Retrieves the methods available for a specific node.
      tags:
        - Nodes
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Node methods retrieved"
                  data:
                    $ref: "#/components/schemas/NodeWithMethods"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /nodes/methods/unconfigured:
    get:
      operationId: getUnconfiguredNodeMethods
      summary: Get unconfigured node methods
      description: |
        Retrieves nodes with methods that have not been configured.
      tags:
        - Nodes
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Unconfigured nodes retrieved"
                  data:
                    type: array
                    description: List of unconfigured nodes with methods
                    items:
                      $ref: "#/components/schemas/NodeWithMethods"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /permissions:
    get:
      operationId: getPermissionSets
      summary: List permission sets
      description: |
        Retrieves a list of all permission sets configured in the system.
      tags:
        - Permissions
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Permission sets retrieved successfully"
                  data:
                    type: object
                    properties:
                      permissionSets:
                        type: array
                        description: List of permission sets
                        items:
                          $ref: "#/components/schemas/PermissionSet"
                    required:
                      - permissionSets
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createPermissionSet
      summary: Create permission set
      description: |
        Creates a new permission set in the system.
      tags:
        - Permissions
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionSetCreate"
      responses:
        "201":
          description: Permission set created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "201"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set created successfully"
                  data:
                    $ref: "#/components/schemas/PermissionSet"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /permissions/{id}:
    parameters:
      - name: id
        in: path
        description: Permission set ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getPermissionSet
      summary: Get permission set
      description: |
        Retrieves details of a specific permission set.
      tags:
        - Permissions
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set retrieved successfully"
                  data:
                    $ref: "#/components/schemas/PermissionSet"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updatePermissionSet
      summary: Update permission set
      description: |
        Updates an existing permission set with new information.
      tags:
        - Permissions
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionSetUpdate"
      responses:
        "200":
          description: Permission set updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set updated successfully"
                  data:
                    $ref: "#/components/schemas/PermissionSet"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deletePermissionSet
      summary: Delete permission set
      description: |
        Deletes a permission set from the system.
      tags:
        - Permissions
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Permission set deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "Permission set deleted successfully"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Permission set is in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status code of the operation
                    example: "409"
                  message:
                    type: string
                    description: Error message
                    example: "Cannot delete permission set that is assigned to groups or users"
                  data:
                    type: object
                    default: {}
                required:
                  - status
                  - message
                  - data
        "500":
          $ref: "#/components/responses/InternalServerError"

  /pipelines:
    get:
      operationId: getPipelines
      summary: List pipelines
      description: |
        Retrieves a list of all pipelines configured in the system.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      parameters:
        - name: pageSize
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: nextToken
          in: query
          description: Token for pagination
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by pipeline status
          required: false
          schema:
            type: string
            enum: ["active", "inactive", "error"]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "200"
                  message:
                    type: string
                    description: Status message
                    example: "ok"
                  data:
                    type: object
                    properties:
                      searchMetadata:
                        type: object
                        properties:
                          totalResults:
                            type: integer
                            description: Total number of results
                            example: 15
                          pageSize:
                            type: integer
                            description: Number of results per page
                            example: 20
                          nextToken:
                            type: string
                            description: Token for retrieving the next page of results
                            example: "eyJsaW1pdCI6MTAsImxhc3RFdmFsdWF0ZWRLZXkiOnsiaWQiOiIxMjM0NTY3ODkwIiwiZXhlY3V0aW9uSWQiOiJhYmNkZWYxMjM0In19" # pragma: allowlist secret
                        required:
                          - totalResults
                          - pageSize
                      pipelines:
                        type: array
                        description: List of pipelines
                        items:
                          $ref: "#/components/schemas/Pipeline"
                    required:
                      - searchMetadata
                      - pipelines
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: createPipeline
      summary: Create pipeline
      description: |
        Creates a new pipeline in the system.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineCreate"
      responses:
        "200":
          description: Pipeline created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline created successfully"
                  pipeline_id:
                    type: string
                    format: uuid
                    description: ID of the created pipeline
                    example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  pipeline_name:
                    type: string
                    description: Name of the created pipeline
                    example: "Video Analysis Pipeline"
                  state_machine_arn:
                    type: string
                    description: ARN of the created state machine
                    example: "arn:aws:states:us-east-1:123456789012:stateMachine:video-analysis-pipeline"
                  deployment_status:
                    type: string
                    description: Deployment status of the pipeline
                    example: "DEPLOYED"
                required:
                  - message
                  - pipeline_id
                  - pipeline_name
                  - state_machine_arn
                  - deployment_status
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error type
                    example: "Pipeline name already exists"
                  details:
                    type: string
                    description: Error details
                    example: "A pipeline with the name 'Video Analysis Pipeline' already exists. Please use a different name or update the existing pipeline."
                required:
                  - error
                  - details
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /pipelines/{id}:
    parameters:
      - name: id
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getPipelineById
      summary: Get pipeline by ID
      description: |
        Retrieves detailed information about a specific pipeline.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Pipeline"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updatePipeline
      summary: Update pipeline
      description: |
        Updates an existing pipeline with new information.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineUpdate"
      responses:
        "200":
          description: Pipeline updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline updated successfully"
                  pipeline_id:
                    type: string
                    format: uuid
                    description: ID of the updated pipeline
                    example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  pipeline_name:
                    type: string
                    description: Name of the updated pipeline
                    example: "Video Analysis Pipeline"
                  state_machine_arn:
                    type: string
                    description: ARN of the updated state machine
                    example: "arn:aws:states:us-east-1:123456789012:stateMachine:video-analysis-pipeline"
                  deployment_status:
                    type: string
                    description: Deployment status of the pipeline
                    example: "DEPLOYED"
                required:
                  - message
                  - pipeline_id
                  - pipeline_name
                  - state_machine_arn
                  - deployment_status
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deletePipeline
      summary: Delete pipeline
      description: |
        Deletes a pipeline from the system.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Pipeline deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /pipelines/{id}/execute:
    parameters:
      - name: id
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
          format: uuid

    post:
      operationId: executePipeline
      summary: Execute pipeline
      description: |
        Executes a pipeline on specified assets.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assetIds:
                  type: array
                  description: IDs of assets to process
                  items:
                    type: string
                    format: uuid
                  example: ["a1b2c3d4-e5f6-7890-abcd-ef1234567890"]
                parameters:
                  type: object
                  description: Optional parameters for pipeline execution
                  additionalProperties: true
              required:
                - assetIds
      responses:
        "202":
          description: Pipeline execution initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline execution initiated"
                  data:
                    type: object
                    properties:
                      executionId:
                        type: string
                        format: uuid
                        description: ID of the pipeline execution
                        example: "b2c3d4e5-f6g7-8901-abcd-ef2345678901"
                      status:
                        type: string
                        description: Status of the execution
                        example: "RUNNING"
                    required:
                      - executionId
                      - status
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /pipelines/{id}/executions:
    parameters:
      - name: id
        in: path
        description: Pipeline ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getPipelineExecutions
      summary: Get pipeline executions
      description: |
        Retrieves the execution history for a specific pipeline.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of executions to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: nextToken
          in: query
          description: Token for pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline executions retrieved successfully"
                  data:
                    type: object
                    properties:
                      executions:
                        type: array
                        description: List of pipeline executions
                        items:
                          $ref: "#/components/schemas/PipelineExecution"
                      nextToken:
                        type: string
                        description: Token for retrieving the next page of results
                        example: "eyJsaW1pdCI6MTAsImxhc3RFdmFsdWF0ZWRLZXkiOnsiaWQiOiIxMjM0NTY3ODkwIiwiZXhlY3V0aW9uSWQiOiJhYmNkZWYxMjM0In19" # pragma: allowlist secret
                    required:
                      - executions
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /pipelines/executions/{executionId}:
    parameters:
      - name: executionId
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getPipelineExecution
      summary: Get pipeline execution
      description: |
        Retrieves detailed information about a specific pipeline execution.
      tags:
        - Pipelines
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Pipeline execution retrieved successfully"
                  data:
                    $ref: "#/components/schemas/PipelineExecution"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /reviews/{id}:
    parameters:
      - name: id
        in: path
        description: Review ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getReviewById
      summary: Get review by ID
      description: |
        Retrieves detailed information about a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Review retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Review"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateReview
      summary: Update review
      description: |
        Updates an existing review with new information.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdate"
      responses:
        "200":
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Review updated successfully"
                  data:
                    $ref: "#/components/schemas/Review"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteReview
      summary: Delete review
      description: |
        Deletes a review from the system.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Review deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /reviews/{id}/annotations:
    parameters:
      - name: id
        in: path
        description: Review ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getReviewAnnotations
      summary: Get review annotations
      description: |
        Retrieves annotations associated with a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Annotations retrieved successfully"
                  data:
                    type: array
                    description: List of annotations
                    items:
                      $ref: "#/components/schemas/ReviewAnnotation"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateReviewAnnotations
      summary: Update review annotations
      description: |
        Updates annotations for a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ReviewAnnotationUpdate"
      responses:
        "200":
          description: Annotations updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Annotations updated successfully"
                  data:
                    type: array
                    description: Updated annotations
                    items:
                      $ref: "#/components/schemas/ReviewAnnotation"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteReviewAnnotations
      summary: Delete review annotations
      description: |
        Deletes all annotations for a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Annotations deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Annotations deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /reviews/{id}/status:
    parameters:
      - name: id
        in: path
        description: Review ID
        required: true
        schema:
          type: string
          format: uuid

    get:
      operationId: getReviewStatus
      summary: Get review status
      description: |
        Retrieves the current status of a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Status retrieved successfully"
                  data:
                    $ref: "#/components/schemas/ReviewStatus"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: updateReviewStatus
      summary: Update review status
      description: |
        Updates the status of a specific review.
      tags:
        - Reviews
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewStatusUpdate"
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Status updated successfully"
                  data:
                    $ref: "#/components/schemas/ReviewStatus"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /roles:
    get:
      operationId: getRoles
      summary: List roles
      description: |
        Retrieves a list of all roles configured in the system.
      tags:
        - Roles
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Roles retrieved successfully"
                  data:
                    type: array
                    description: List of roles
                    items:
                      $ref: "#/components/schemas/Role"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /roles/role/{id}:
    parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string

    post:
      operationId: createRole
      summary: Create role
      description: |
        Creates a new role in the system.
      tags:
        - Roles
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreate"
      responses:
        "201":
          description: Role created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Role created successfully"
                  data:
                    $ref: "#/components/schemas/Role"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "error"
                  message:
                    type: string
                    description: Error message
                    example: "Role already exists"
                required:
                  - status
                  - message
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateRole
      summary: Update role
      description: |
        Updates an existing role with new information.
      tags:
        - Roles
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdate"
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Role updated successfully"
                  data:
                    $ref: "#/components/schemas/Role"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteRole
      summary: Delete role
      description: |
        Deletes a role from the system.
      tags:
        - Roles
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Role deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Role deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /search:
    get:
      operationId: searchAssets
      summary: Search assets
      description: |
        Searches for assets based on the provided query parameters.
      tags:
        - Search
      security:
        - CognitoAuth: []
      parameters:
        - name: q
          in: query
          description: Search query string
          required: true
          schema:
            type: string
            minLength: 1
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
        - name: min_score
          in: query
          description: Minimum score threshold for search results
          required: false
          schema:
            type: number
            format: float
            default: 0.01
        - name: semantic
          in: query
          description: Whether to perform semantic search
          required: false
          schema:
            type: boolean
            default: false
        - name: type
          in: query
          description: Filter by asset type (comma-separated)
          required: false
          schema:
            type: string
        - name: extension
          in: query
          description: Filter by file extension (comma-separated)
          required: false
          schema:
            type: string
        - name: asset_size_lte
          in: query
          description: Filter by asset size less than or equal to (bytes)
          required: false
          schema:
            type: integer
        - name: asset_size_gte
          in: query
          description: Filter by asset size greater than or equal to (bytes)
          required: false
          schema:
            type: integer
        - name: ingested_date_lte
          in: query
          description: Filter by ingestion date less than or equal to (ISO format)
          required: false
          schema:
            type: string
            format: date-time
        - name: ingested_date_gte
          in: query
          description: Filter by ingestion date greater than or equal to (ISO format)
          required: false
          schema:
            type: string
            format: date-time
        - name: filename
          in: query
          description: Filter by filename
          required: false
          schema:
            type: string
        - name: storageIdentifier
          in: query
          description: Filter by storage identifier
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Search completed successfully"
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        description: List of search results
                        items:
                          $ref: "#/components/schemas/SearchResult"
                      metadata:
                        $ref: "#/components/schemas/SearchMetadata"
                    required:
                      - results
                      - metadata
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /search/fields:
    get:
      operationId: getSearchFields
      summary: Get search fields
      description: |
        Retrieves the available search fields and default fields.
      tags:
        - Search
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Fields retrieved successfully"
                  data:
                    type: object
                    properties:
                      defaultFields:
                        type: array
                        description: List of default search fields
                        items:
                          $ref: "#/components/schemas/SearchFieldInfo"
                      availableFields:
                        type: array
                        description: List of all available search fields
                        items:
                          $ref: "#/components/schemas/SearchFieldInfo"
                    required:
                      - defaultFields
                      - availableFields
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/system:
    get:
      operationId: getSystemSettings
      summary: Get system settings
      description: |
        Retrieves the system-wide settings.
      tags:
        - Settings
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "System settings retrieved successfully"
                  data:
                    type: object
                    properties:
                      searchProvider:
                        $ref: "#/components/schemas/SettingsSearchProvider"
                    required:
                      - searchProvider
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/system/search:
    get:
      operationId: getSearchSettings
      summary: Get search settings
      description: |
        Retrieves the search-specific system settings.
      tags:
        - Settings
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Search settings retrieved successfully"
                  data:
                    $ref: "#/components/schemas/SettingsSearch"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateSearchSettings
      summary: Update search settings
      description: |
        Updates the search-specific system settings.
      tags:
        - Settings
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsSearchUpdate"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Search settings updated successfully"
                  data:
                    $ref: "#/components/schemas/SettingsSearch"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/users:
    get:
      operationId: getSettingsUsers
      summary: List users
      description: |
        Retrieves a list of all users in the system.
      tags:
        - Settings
        - Users
      security:
        - CognitoAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 60
        - name: paginationToken
          in: query
          description: Token for pagination
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Users retrieved successfully"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        description: List of users
                        items:
                          $ref: "#/components/schemas/SettingsUser"
                      searchMetadata:
                        type: object
                        properties:
                          totalResults:
                            type: integer
                            description: Total number of results
                            example: 120
                          page:
                            type: integer
                            description: Current page number
                            example: 1
                          pageSize:
                            type: integer
                            description: Number of results per page
                            example: 60
                        required:
                          - totalResults
                          - page
                          - pageSize
                      nextToken:
                        type: string
                        description: Token for retrieving the next page of results
                        example: "eyJsaW1pdCI6MTAsImxhc3RFdmFsdWF0ZWRLZXkiOnsiaWQiOiIxMjM0NTY3ODkwIiwiZXhlY3V0aW9uSWQiOiJhYmNkZWYxMjM0In19" # pragma: allowlist secret
                    required:
                      - users
                      - searchMetadata
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string

    get:
      operationId: getSettingsUserById
      summary: Get user by ID
      description: |
        Retrieves detailed information about a specific user.
      tags:
        - Settings
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User retrieved successfully"
                  data:
                    $ref: "#/components/schemas/SettingsUser"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateSettingsUser
      summary: Update user
      description: |
        Updates an existing user with new information.
      tags:
        - Settings
        - Users
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsUserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User updated successfully"
                  data:
                    $ref: "#/components/schemas/SettingsUser"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      operationId: deleteUser
      summary: Delete user
      description: |
        Deletes a user from the system.
      tags:
        - Settings
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/users/user:
    post:
      operationId: createSettingsUser
      summary: Create user
      description: |
        Creates a new user in the system.
      tags:
        - Settings
        - Users
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsUserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User created successfully"
                  data:
                    $ref: "#/components/schemas/SettingsUser"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "error"
                  message:
                    type: string
                    description: Error message
                    example: "User already exists"
                required:
                  - status
                  - message
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/roles:
    get:
      operationId: getSettingsRoles
      summary: List roles
      description: |
        Retrieves a list of all roles in the system.
      tags:
        - Settings
        - Roles
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Roles retrieved successfully"
                  data:
                    type: array
                    description: List of roles
                    items:
                      $ref: "#/components/schemas/SettingsRole"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /settings/roles/{id}:
    parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string

    get:
      operationId: getRoleById
      summary: Get role by ID
      description: |
        Retrieves detailed information about a specific role.
      tags:
        - Settings
        - Roles
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Role retrieved successfully"
                  data:
                    $ref: "#/components/schemas/SettingsRole"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/profile:
    get:
      operationId: getUserProfile
      summary: Get user profile
      description: |
        Retrieves the profile of the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User profile retrieved successfully"
                  data:
                    $ref: "#/components/schemas/UserProfile"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateUserProfile
      summary: Update user profile
      description: |
        Updates the profile of the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdate"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User profile updated successfully"
                  data:
                    $ref: "#/components/schemas/UserProfile"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/favorites:
    get:
      operationId: getUserFavorites
      summary: Get user favorites
      description: |
        Retrieves the favorites of the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      parameters:
        - name: itemType
          in: query
          description: Filter favorites by item type
          required: false
          schema:
            type: string
            example: "asset"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User favorites retrieved successfully"
                  data:
                    $ref: "#/components/schemas/UserFavorites"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      operationId: addUserFavorite
      summary: Add user favorite
      description: |
        Adds an item to the authenticated user's favorites.
      tags:
        - Users
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserFavoriteAdd"
      responses:
        "201":
          description: Favorite added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Favorite added successfully"
                  data:
                    $ref: "#/components/schemas/UserFavorite"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/favorites/{id}:
    parameters:
      - name: id
        in: path
        description: Favorite ID
        required: true
        schema:
          type: string

    delete:
      operationId: deleteUserFavorite
      summary: Delete user favorite
      description: |
        Removes an item from the authenticated user's favorites.
      tags:
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Favorite deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "Favorite deleted successfully"
                required:
                  - status
                  - message
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/settings:
    get:
      operationId: getUserSettings
      summary: Get user settings
      description: |
        Retrieves the settings of the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User settings retrieved successfully"
                  data:
                    $ref: "#/components/schemas/UserSettings"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      operationId: updateUserSettings
      summary: Update user settings
      description: |
        Updates the settings of the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettingsUpdate"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User settings updated successfully"
                  data:
                    $ref: "#/components/schemas/UserSettings"
                required:
                  - status
                  - message
                  - data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/user:
    get:
      operationId: getCurrentUser
      summary: Get current user
      description: |
        Retrieves information about the authenticated user.
      tags:
        - Users
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation
                    example: "success"
                  message:
                    type: string
                    description: Status message
                    example: "User retrieved successfully"
                  data:
                    $ref: "#/components/schemas/CurrentUser"
                required:
                  - status
                  - message
                  - data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
